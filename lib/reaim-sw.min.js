!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("reaim-web-sdk",[],e):"object"==typeof exports?exports["reaim-web-sdk"]=e():t["reaim-web-sdk"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.REAIM_CLICK=e.REAIM_IMPRESSION=e.REAIM_STORAGE_NAME=e.REAIM_SUBS_API=e.REAIM_EVENTS_API=e.REAIM_SAVE_SUBSCRIPTION=e.REAIM_RETRY_USER=e.REAIM_UID=e.REAIM_PUSH_USER_SUBSCRIBED=e.REAIM_DENIED_ON_VISITS=e.REAIM_SDK_VISITS=e.PRODUCTION=void 0;e.PRODUCTION=!0;e.REAIM_SDK_VISITS="reaim_sdk_visits";e.REAIM_DENIED_ON_VISITS="reaim_sdk_denied_on_visits";e.REAIM_PUSH_USER_SUBSCRIBED="reaim_sdk_push_user_subscribed";e.REAIM_UID="reaim_sdk_uid";e.REAIM_RETRY_USER="reaim_sdk_retry_user";e.REAIM_SAVE_SUBSCRIPTION="reaim_save_subscription";e.REAIM_EVENTS_API="https://events.reaim.me";e.REAIM_SUBS_API="https://subs.reaim.me";e.REAIM_STORAGE_NAME="reaim_sdk_storage";e.REAIM_IMPRESSION="i";e.REAIM_CLICK="c"},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,e,n,r){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new b(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return I()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=g(a,n);if(c){if(c===s)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===s)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var s={};function l(){}function f(){}function h(){}var d={};d[o]=function(){return this};var p=Object.getPrototypeOf,v=p&&p(p(w([])));v&&v!==e&&n.call(v,o)&&(d=v);var y=h.prototype=l.prototype=Object.create(d);function _(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function E(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,c){var s=u(t[o],t,i);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function g(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,g(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=u(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,s;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function m(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function b(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(m,this),this.reset(!0)}function w(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:I}}function I(){return{value:void 0,done:!0}}return f.prototype=y.constructor=h,h.constructor=f,h[a]=f.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},_(E.prototype),E.prototype[i]=function(){return this},t.AsyncIterator=E,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new E(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(y),y[a]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=w,b.prototype={constructor:b,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:w(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,,function(t,e,n){"use strict";var r=a(n(1)),o=a(n(7)),i=n(0);function a(t){return t&&t.__esModule?t:{default:t}}function c(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function u(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){c(i,r,o,a,u,"next",t)}function u(t){c(i,r,o,a,u,"throw",t)}a(void 0)}))}}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=new o.default(i.REAIM_STORAGE_NAME,1),f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o,a,c,f,h,d,p,v;return e=t,n=null,o=[{key:"log",value:(v=u(r.default.mark((function t(e,n,o){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e&&n&&o)){t.next=10;break}t.t0=o,t.next="cmp"===t.t0?4:"trg"===t.t0?6:"feed"===t.t0?8:10;break;case 4:return fetch("".concat(i.REAIM_EVENTS_API,"/log?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 6:return fetch("".concat(i.REAIM_EVENTS_API,"/trigger?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 8:return fetch("".concat(i.REAIM_EVENTS_API,"/feed?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 10:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return v.apply(this,arguments)})},{key:"updateSubscription",value:(p=u(r.default.mark((function t(e){var n,o;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:try{(n=localStorage.getItem(i.REAIM_UID))&&(o=new Request("".concat(i.REAIM_SUBS_API,"/refresh"),{method:"POST",body:JSON.stringify({id:n,endpoint:e.endpoint,auth:e.keys.auth,p256dh:e.keys.p256dh})}),self.fetch(o))}catch(t){console.log(t)}case 1:case"end":return t.stop()}}),t,this)}))),function(t){return p.apply(this,arguments)})},{key:"handleInstall",value:function(t){self.skipWaiting()}},{key:"handleActivate",value:function(t){t.waitUntil(self.clients.claim())}},{key:"handlePushEvent",value:(d=u(r.default.mark((function e(n){var o,a,c;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=n.data.json(),a=o.c.t,c={body:o.c.d,icon:o.c.i,image:o.c.m,badge:o.c.b,actions:o.c.a,data:{tracking:o.t,url:o.c.u,actions:o.c.a,variant:o.v}},t.log(i.REAIM_IMPRESSION,o.t,o.v),n.waitUntil(self.registration.showNotification(a,c));case 5:case"end":return e.stop()}}),e,this)}))),function(t){return d.apply(this,arguments)})},{key:"handleClickEvent",value:(h=u(r.default.mark((function e(n){var o,a,c,u;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.notification.close(),o=n.notification.data.tracking,a=n.notification.data.variant||"cmp","action-1"===n.action?(c=n.notification.data.actions[0].url,t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(c))):"action-2"===n.action?(u=n.notification.data.actions[1].url,t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(u))):n.notification.data.url&&(t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(n.notification.data.url)));case 4:case"end":return e.stop()}}),e,this)}))),function(t){return h.apply(this,arguments)})},{key:"handleUpdateSubscription",value:(f=u(r.default.mark((function e(n){var o,i;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,self.registration.pushManager.getSubscription();case 2:return o=e.sent,e.t0=JSON,e.next=6,l.getItem("subscription");case 6:e.t1=e.sent,(i=e.t0.parse.call(e.t0,e.t1))||(t.saveLocalSubscription(o),t.updateSubscription(o)),o&&i&&o.endpoint!==i.endpoint&&(t.saveLocalSubscription(o),t.updateSubscription(o));case 10:case"end":return e.stop()}}),e,this)}))),function(t){return f.apply(this,arguments)})},{key:"saveLocalSubscription",value:(c=u(r.default.mark((function t(e){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l.setItem("subscription",e);case 2:case"end":return t.stop()}}),t,this)}))),function(t){return c.apply(this,arguments)})},{key:"handleMessage",value:(a=u(r.default.mark((function e(n){return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.data.action===i.REAIM_SAVE_SUBSCRIPTION&&n.waitUntil(t.saveLocalSubscription(n.data.subscription));case 1:case"end":return e.stop()}}),e,this)}))),function(t){return a.apply(this,arguments)})}],n&&s(e.prototype,n),o&&s(e,o),t}();self.addEventListener("install",f.handleInstall),self.addEventListener("activate",f.handleActivate),self.addEventListener("push",f.handlePushEvent),self.addEventListener("notificationclick",f.handleClickEvent),self.addEventListener("pushsubscriptionchange",f.handleUpdateSubscription),self.addEventListener("message",f.handleMessage)},function(t,e,n){"use strict";var r=n(8);t.exports=r.ServiceWorkerStorage},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.promisify=i;var o=e.IDB_TRANSACTION_MODE={readonly:"readonly",readwrite:"readwrite",versionchange:"versionchange"};function i(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=n}))}e.ServiceWorkerStorage=function(){function t(e,n){var r=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw new TypeError("db_name must be string.");if("number"!=typeof n)throw new TypeError("version must be number.");var o=n;this.DB_NAME=e,this.STORE_NAME="sw_storage";var a=self.indexedDB.open(this.DB_NAME,o);a.onupgradeneeded=function(t){var e=t.target.result;e.objectStoreNames&&e.objectStoreNames.contains(r.STORE_NAME)||e.createObjectStore(r.STORE_NAME)},this.__db=i(a)}return r(t,[{key:"_accessAsyncStore",value:function(t){var e=this;return this.__db.then((function(n){return n.transaction(e.STORE_NAME,t).objectStore(e.STORE_NAME)}))}},{key:"length",value:function(){return this._accessAsyncStore(o.readonly).then((function(t){return i(t.getAllKeys())})).then((function(t){return t.length}))}},{key:"key",value:function(t){return arguments.length?("number"!=typeof t&&(t=0),this._accessAsyncStore(o.readonly).then((function(t){return i(t.getAllKeys())})).then((function(e){return e[t]||null}))):Promise.reject(new TypeError('Failed to execute "key" on "Storage"'))}},{key:"getItem",value:function(t){return this._accessAsyncStore(o.readonly).then((function(e){return e.get(t)})).then(i)}},{key:"setItem",value:function(t,e){return this._accessAsyncStore(o.readwrite).then((function(n){return n.put(e,t)})).then(i)}},{key:"removeItem",value:function(t){return this._accessAsyncStore(o.readwrite).then((function(e){return e.delete(t)})).then(i)}},{key:"clear",value:function(){return this.__db.then((function(t){for(var e=t.transaction(t.objectStoreNames,o.readwrite),n=[],r=0,a=t.objectStoreNames.length;r<a;r++){var c=t.objectStoreNames[r];n.push(i(e.objectStore(c).clear()))}return Promise.all(n)}))}}]),t}()}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,