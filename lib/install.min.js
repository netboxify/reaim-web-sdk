!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("reaim-web-sdk",[],e):"object"==typeof exports?exports["reaim-web-sdk"]=e():t["reaim-web-sdk"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.REAIM_CLICK=e.REAIM_IMPRESSION=e.REAIM_STORAGE_NAME=e.REAIM_SUBS_API=e.REAIM_EVENTS_API=e.REAIM_SAVE_SUBSCRIPTION=e.REAIM_UID=e.REAIM_PUSH_USER_SUBSCRIBED=e.REAIM_DENIED_ON_VISITS=e.REAIM_SDK_VISITS=e.PRODUCTION=void 0;e.PRODUCTION=!0;e.REAIM_SDK_VISITS="reaim_sdk_visits";e.REAIM_DENIED_ON_VISITS="reaim_sdk_denied_on_visits";e.REAIM_PUSH_USER_SUBSCRIBED="reaim_sdk_push_user_subscribed";e.REAIM_UID="reaim_sdk_uid";e.REAIM_SAVE_SUBSCRIPTION="reaim_save_subscription";e.REAIM_EVENTS_API="https://events.reaim.me";e.REAIM_SUBS_API="https://subs.reaim.me";e.REAIM_STORAGE_NAME="reaim_sdk_storage";e.REAIM_IMPRESSION="i";e.REAIM_CLICK="c"},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(t,e,n,r){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return I()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=b(a,n);if(s){if(s===u)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=c(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var u={};function l(){}function d(){}function p(){}var f={};f[o]=function(){return this};var h=Object.getPrototypeOf,m=h&&h(h(S([])));m&&m!==e&&n.call(m,o)&&(f=m);var v=p.prototype=l.prototype=Object.create(f);function g(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function y(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var u=c(t[o],t,i);if("throw"!==u.type){var l=u.arg,d=l.value;return d&&"object"==typeof d&&n.call(d,"__await")?e.resolve(d.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(d).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(u.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=c(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function w(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:I}}function I(){return{value:void 0,done:!0}}return d.prototype=v.constructor=p,p.constructor=d,p[a]=d.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},g(y.prototype),y.prototype[i]=function(){return this},t.AsyncIterator=y,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new y(s(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(v),v[a]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=S,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),u},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),w(n),u}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;w(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n(3),o=n(0),i=c(n(4)),a=c(n(5)),s=c(n(1));function c(t){return t&&t.__esModule?t:{default:t}}function u(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){u(i,r,o,a,s,"next",t)}function s(t){u(i,r,o,a,s,"throw",t)}a(void 0)}))}}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=function(){function t(e,n){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e&&"function"!=typeof e)throw new Error("Type of onAllow parameter should be function.");if(n&&"function"!=typeof n)throw new Error("Type of onBlock parameter should be function.");this.metaEndpoint=o.REAIM_SUBS_API,this.onAllow=e||r.noop,this.onBlock=n||r.noop}var e,n,c,u,p,f,h;return e=t,n=[{key:"log",value:function(t){console.log("ReAim SDK -",t)}},{key:"getMetadata",value:(h=l(s.default.mark((function t(){var e,n,r;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Intl.DateTimeFormat().resolvedOptions().timeZone,t.next=3,fetch(this.metaEndpoint+"/info?tz="+e);case 3:return n=t.sent,t.next=6,n.json();case 6:return r=t.sent,t.abrupt("return",r);case 8:case"end":return t.stop()}}),t,this)}))),function(){return h.apply(this,arguments)})},{key:"canSubscribe",value:function(){return"default"===Notification.permission}},{key:"setAsSubscribed",value:function(){this.setValue(o.REAIM_PUSH_USER_SUBSCRIBED,!0)}},{key:"setAsUnsubscribed",value:function(){this.setValue(o.REAIM_PUSH_USER_SUBSCRIBED,!1)}},{key:"setValue",value:function(t,e){localStorage.setItem(t,e)}},{key:"getValue",value:function(t){return localStorage.getItem(t)}},{key:"getSWPath",value:function(){return o.PRODUCTION?self.window&&self.window.REAIM_SW_PATH_GLOBAL||"/sw.js":"/reaim-sw.js"}},{key:"registerSW",value:function(){var t=this.getSWPath();return navigator.serviceWorker.register(t)}},{key:"prepareRequest",value:function(t,e){return{site_id:e.site_id,country_id:e.country_id,platform_id:e.platform_id,os_id:e.os_id,timezone_id:e.timezone_id,tz:(new Date).getTimezoneOffset()/60,browser_id:e.browser_id,user_id:e.user_id,endpoint:t.endpoint,auth:t.keys.auth,p256dh:t.keys.p256dh,page_url:window.location.pathname,sites_uid:this.sitesUID}}},{key:"saveUser",value:(f=l(s.default.mark((function t(e){var n,r;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(this.metaEndpoint+"/save",{method:"POST",body:JSON.stringify(e)});case 3:return n=t.sent,t.next=6,n.text();case 6:r=t.sent,this.setValue(o.REAIM_UID,r),this.setAsSubscribed(),this.htmlDOM&&this.hideModal(),this.log("user_subscribed"),t.next=16;break;case 13:t.prev=13,t.t0=t.catch(0),this.log(t.t0);case 16:case"end":return t.stop()}}),t,this,[[0,13]])}))),function(t){return f.apply(this,arguments)})},{key:"checkIfStillSubscribed",value:function(){"granted"!==Notification.permission&&this.setAsUnsubscribed()}},{key:"tryToSubscribe",value:(p=l(s.default.mark((function t(e){var n,i,a,c,u;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n={userVisibleOnly:!0,applicationServerKey:(0,r.urlBase64ToUint8Array)(e.vapid_pub_key)},t.next=4,this.registration.pushManager.subscribe(n);case 4:i=t.sent,navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({action:o.REAIM_SAVE_SUBSCRIPTION,subscription:JSON.parse(JSON.stringify(i))}),this.onAllow(),a=JSON.stringify(i),c=JSON.parse(a),u=this.prepareRequest(c,e),this.saveUser(u),e.wn&&this.showWelcomeNotification(e),t.next=19;break;case 14:t.prev=14,t.t0=t.catch(0),this.log(t.t0),this.log("user_declined"),this.onBlock();case 19:case"end":return t.stop()}}),t,this,[[0,14]])}))),function(t){return p.apply(this,arguments)})},{key:"showWelcomeNotification",value:function(t){try{var e=JSON.parse(decodeURIComponent(atob(t.wn_content)));this.registration.showNotification(e.title,{body:e.description,data:{url:e.url}})}catch(t){this.log(t)}}},{key:"preloadImage",value:function(t){(new Image).src=t}},{key:"showCustomModal",value:function(t,e){var n=this,r=(0,a.default)(e),o=(0,i.default)(e);e.logo&&this.preloadImage(e.logo);var s=document.createElement("style");s.innerHTML=r;var c=document.createDocumentFragment(),u=document.createElement("div");u.classList.add("reaim-web-modal"),u.classList.add("reaim-web-modal-closed"),u.innerHTML=o,this.htmlDOM=u,u.querySelector(".reaim-button-deny").addEventListener("click",(function(t){n.hideModal(),n.logVisitsNumberWhenDenied()})),u.querySelector(".reaim-button-accept").addEventListener("click",(function(e){n.hideModal(),n.tryToSubscribe(t)})),c.appendChild(u),document.head.appendChild(s),document.body.appendChild(c),u.classList.remove("reaim-web-modal-closed")}},{key:"hideModal",value:function(){this.htmlDOM.style.display="none"}},{key:"enoughVisitsAfterBlock",value:function(t){var e=this.getNumberOfVisitsWhenDenied(),n=this.getVisits();return 0===e||n>=e+t}},{key:"showModal",value:function(t){var e=this;if("custom"===t.prompt_type){var n=JSON.parse(atob(t.prompt));n.showImmediately?(this.log("show_immediately_custom_prompt"),this.showCustomModal(t,n)):this.getVisits()>=n.sessionNumber&&this.enoughVisitsAfterBlock(n.askAgainAfter)&&(this.log("show_timed_custom_prompt"),setTimeout((function(){e.showCustomModal(t,n)}),1e3*n.showAfter))}else this.log("show_native_prompt"),this.tryToSubscribe(t)}},{key:"logVisit",value:function(){var t=this.getValue(o.REAIM_SDK_VISITS)||0;this.setValue(o.REAIM_SDK_VISITS,+t+1)}},{key:"logVisitsNumberWhenDenied",value:function(){var t=this.getValue(o.REAIM_SDK_VISITS);this.setValue(o.REAIM_DENIED_ON_VISITS,t)}},{key:"getNumberOfVisitsWhenDenied",value:function(){var t=JSON.parse(this.getValue(o.REAIM_DENIED_ON_VISITS));return t||0}},{key:"getVisits",value:function(){return JSON.parse(this.getValue(o.REAIM_SDK_VISITS))||0}},{key:"init",value:(u=l(s.default.mark((function t(e){var n;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.logVisit(),this.sitesUID=e,"serviceWorker"in navigator){t.next=4;break}return t.abrupt("return");case 4:if("PushManager"in window){t.next=6;break}return t.abrupt("return");case 6:return t.next=8,this.registerSW();case 8:if(this.registration=t.sent,!this.canSubscribe()){t.next=17;break}return this.log("try_to_subscribe"),t.next=13,this.getMetadata();case 13:n=t.sent,this.showModal(n),t.next=18;break;case 17:this.checkIfStillSubscribed();case 18:case"end":return t.stop()}}),t,this)}))),function(t){return u.apply(this,arguments)})}],c=[{key:"trackConversion",value:function(t){var e=new URLSearchParams(window.location.search).get("r_cid");e&&t&&(0,r.isValidToken)(e)&&fetch("".concat(o.REAIM_EVENTS_API,"/conv?t=").concat(e,"&payout=").concat(t))}},{key:"addTags",value:function(t){var e=JSON.parse(localStorage.getItem(o.REAIM_PUSH_USER_SUBSCRIBED)),n=JSON.parse(localStorage.getItem(o.REAIM_UID));e&&n&&(Array.isArray("tags")||"string"!=typeof t||(t=[t]),fetch("".concat(o.REAIM_SUBS_API,"/tags"),{method:"POST",body:JSON.stringify({subscriber:n,tags:t})}))}}],n&&d(e.prototype,n),c&&d(e,c),t}();window.ReAimSDK=p;var f=p;e.default=f,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.noop=function(){},e.urlBase64ToUint8Array=function(t){for(var e="=".repeat((4-t.length%4)%4),n=(t+e).replace(/\-/g,"+").replace(/_/g,"/"),r=window.atob(n),o=new Uint8Array(r.length),i=0;i<r.length;++i)o[i]=r.charCodeAt(i);return o},e.isValidToken=function(t){try{return btoa(atob(t))===t}catch(t){return!1}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){return'\n    <div class="reaim-prompt-content-wrapper">\n      <div class="reaim-prompt-logo-branding">\n        '.concat(t.logo?'\n          <div class="reaim-prompt-logo" style="'.concat(t.logo?"visibility: visible":"visibility: hidden",'">\n            <img src="').concat(t.logo,'" alt="logo">\n          </div>\n        '):"",'\n      </div>\n\n      <div class="reaim-modal-content">\n        <p>').concat(t.actionText,'</p>\n      </div>\n    </div>\n\n    <div class="reaim-prompt-buttons">\n      <small>\n        <a href="https://reaim.me" target="_blank" rel="noopener">\n          ').concat(t.removeBranding?"":"Powered by ReAim",'\n        </a>\n      </small>\n\n      <div>\n        <button class="reaim-button-deny">').concat(t.blockButton,'</button>\n        <button class="reaim-button-accept">').concat(t.allowButton,"</button>\n      </div>\n    </div>\n  ")},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){return"\n    .reaim-web-modal {\n      all: initial;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: column;\n      position: fixed;\n      max-width: 547px;\n      max-height: 500px;\n      padding: 45px;\n      padding-bottom: 30px;\n      font-size: 14px;\n      font-weight: 100;\n      width: 100%;\n      background: ".concat(t.backgroundColor,";\n      color: ").concat(t.fontColor,';\n      margin: 0 auto;\n      left: 0;\n      right: 0;\n      box-shadow: 1px 2px 20px rgba(0,0,0,0.12), -2px -1px 20px 0px rgba(0,0,0,0.24);\n      border-radius: 0px 0px 8px 8px;\n      top: 0;\n      z-index: 999999;\n      font-family: "Arial", sans-serif;\n      transition-property: all;\n      transition-duration: .5s;\n      transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n    }\n\n    .reaim-web-modal-closed {\n      max-height: 0;\n    }\n\n    .reaim-web-modal * {\n      all: unset;\n    }\n\n    .reaim-web-modal .reaim-prompt-content-wrapper {\n      display: flex;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons small a {\n      display: block;\n      color: ').concat(t.fontColor,";\n      position: relative;\n      text-decoration: none;\n      opacity: 0.5;\n      color: #020E17;\n      font-size: 9px;\n      text-decoration: none;\n      cursor: button;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo {\n      width: 80px;\n      height: 80px;\n      margin-right: 30px;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo img {\n      max-width: 80px;\n      width: 100%;\n    }\n\n    .reaim-web-modal .reaim-modal-content {\n      width: 360px;\n      position: relative;\n      margin-left: 20px;\n    }\n\n    .reaim-web-modal .reaim-modal-content p {\n      height: 65px;\n      font-size: 16px;\n      margin-top: 0;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-top: 25px;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons button {\n      box-sizing: border-box;\n      height: 52px;\n      border-radius: 8px;\n      cursor: pointer;\n      margin-left: 10px;\n      padding: 10px 20px;\n      border: none;\n      outline: none;\n      font-size: 14px;\n    }\n\n    .reaim-web-modal .reaim-button-deny {\n      background: ").concat(t.blockButtonColor,";\n      color: ").concat(t.blockFontColor,";\n    }\n\n    .reaim-web-modal .reaim-button-accept {\n      background: ").concat(t.allowButtonColor,";\n      color: ").concat(t.allowFontColor,";\n    }\n\n    @media(max-width: 768px) {\n      .reaim-web-modal {\n        max-width: 375px;\n        font-size: 12px;\n        position: fixed;\n        bottom: 0;\n        top: auto;\n        left: 0;\n        right: 0;\n        border-radius: 8px 8px 0px 0px;\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        font-size: 14px;\n      }\n\n      .reaim-web-modal .reaim-prompt-logo {\n        width: 68px;\n        height: 68px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons {\n        display: flex;\n        margin-top: 10px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        height: 40px;\n        padding: 10px 15px;\n        font-size: 12px;\n      }\n    }\n\n\n    @media(max-width: 350px) {\n      .reaim-web-modal .reaim-modal-content p {\n        height: 90px;\n      }\n    }\n\n    @media(max-width: 324px) {\n      .reaim-web-modal {\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        height: 110px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        paddding: 10px 10px;\n        font-size: 10px;\n      }\n    }\n  ")},t.exports=e.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFpbS13ZWItc2RrL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9yZWFpbS13ZWItc2RrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhaW0td2ViLXNkay8uL3NyYy9oZWxwZXJzLmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9zcmMvaHRtbC5qcyIsIndlYnBhY2s6Ly9yZWFpbS13ZWItc2RrLy4vc3JjL2Nzcy5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJtZXRob2QiLCJhcmciLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsImRvbmUiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJvYmoiLCJlcnIiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJlc29sdmUiLCJyZWplY3QiLCJpbnZva2UiLCJyZXN1bHQiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwidG9TdHJpbmciLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIkZ1bmN0aW9uIiwiUmVBaW1TREsiLCJvbkFsbG93Iiwib25CbG9jayIsIm1ldGFFbmRwb2ludCIsIm1zZyIsImNvbnNvbGUiLCJsb2ciLCJ0aW1lem9uZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsInRpbWVab25lIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJtZXRhZGF0YSIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJzZXRWYWx1ZSIsInZhbCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwid2luZG93IiwiUkVBSU1fU1dfUEFUSF9HTE9CQUwiLCJwYXRoIiwiZ2V0U1dQYXRoIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwic3Vic2NyaXB0aW9uIiwic2l0ZV9pZCIsImNvdW50cnlfaWQiLCJwbGF0Zm9ybV9pZCIsIm9zX2lkIiwidGltZXpvbmVfaWQiLCJ0eiIsIkRhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImJyb3dzZXJfaWQiLCJ1c2VyX2lkIiwiZW5kcG9pbnQiLCJhdXRoIiwicDI1NmRoIiwicGFnZV91cmwiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic2l0ZXNfdWlkIiwic2l0ZXNVSUQiLCJ1c2VyIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXMiLCJ0ZXh0IiwiaWQiLCJzZXRBc1N1YnNjcmliZWQiLCJodG1sRE9NIiwiaGlkZU1vZGFsIiwic2V0QXNVbnN1YnNjcmliZWQiLCJzdWJzY3JpcHRpb25PcHRpb25zIiwidXNlclZpc2libGVPbmx5IiwiYXBwbGljYXRpb25TZXJ2ZXJLZXkiLCJ1cmxCYXNlNjRUb1VpbnQ4QXJyYXkiLCJ2YXBpZF9wdWJfa2V5IiwicmVnaXN0cmF0aW9uIiwicHVzaE1hbmFnZXIiLCJzdWJzY3JpYmUiLCJjb250cm9sbGVyIiwicG9zdE1lc3NhZ2UiLCJhY3Rpb24iLCJwYXJzZSIsInN0cmluZ2lmaWVkIiwicGFyc2VkIiwidXNlck9iamVjdCIsInByZXBhcmVSZXF1ZXN0Iiwic2F2ZVVzZXIiLCJ3biIsInNob3dXZWxjb21lTm90aWZpY2F0aW9uIiwid25Db250ZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXRvYiIsInduX2NvbnRlbnQiLCJzaG93Tm90aWZpY2F0aW9uIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGEiLCJ1cmwiLCJJbWFnZSIsInNyYyIsInByb21wdE1ldGEiLCJjc3MiLCJodG1sIiwibG9nbyIsInByZWxvYWRJbWFnZSIsIlJlQWltQ1NTIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiUmVBaW1ET00iLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwibG9nVmlzaXRzTnVtYmVyV2hlbkRlbmllZCIsInRyeVRvU3Vic2NyaWJlIiwiYXBwZW5kQ2hpbGQiLCJoZWFkIiwicmVtb3ZlIiwic3R5bGUiLCJkaXNwbGF5IiwidmlzaXROdW1iZXIiLCJ2aXNpdHNXaGVuRGVuaWVkIiwiZ2V0TnVtYmVyT2ZWaXNpdHNXaGVuRGVuaWVkIiwicGFnZXZpZXdzIiwiZ2V0VmlzaXRzIiwicHJvbXB0X3R5cGUiLCJwcm9tcHQiLCJzaG93SW1tZWRpYXRlbHkiLCJzaG93Q3VzdG9tTW9kYWwiLCJzZXNzaW9uTnVtYmVyIiwiZW5vdWdoVmlzaXRzQWZ0ZXJCbG9jayIsImFza0FnYWluQWZ0ZXIiLCJzZXRUaW1lb3V0Iiwic2hvd0FmdGVyIiwidmlzaXRzIiwiZ2V0VmFsdWUiLCJsb2dWaXNpdCIsInJlZ2lzdGVyU1ciLCJjYW5TdWJzY3JpYmUiLCJnZXRNZXRhZGF0YSIsInNob3dNb2RhbCIsImNoZWNrSWZTdGlsbFN1YnNjcmliZWQiLCJwYXlvdXQiLCJ0cmFja2luZ0lEIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwiaXNWYWxpZFRva2VuIiwidGFncyIsImlzU3Vic2NyaWJlZCIsInNpZCIsIkFycmF5IiwiaXNBcnJheSIsInN1YnNjcmliZXIiLCJiYXNlNjRTdHJpbmciLCJwYWRkaW5nIiwicmVwZWF0IiwiYmFzZTY0IiwicmVwbGFjZSIsInJhd0RhdGEiLCJvdXRwdXRBcnJheSIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0Iiwic3RyIiwiYnRvYSIsImFjdGlvblRleHQiLCJyZW1vdmVCcmFuZGluZyIsImJsb2NrQnV0dG9uIiwiYWxsb3dCdXR0b24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250Q29sb3IiLCJibG9ja0J1dHRvbkNvbG9yIiwiYmxvY2tGb250Q29sb3IiLCJhbGxvd0J1dHRvbkNvbG9yIiwiYWxsb3dGb250Q29sb3IiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sZ0JBQWlCLEdBQUlILEdBQ0YsaUJBQVpDLFFBQ2RBLFFBQVEsaUJBQW1CRCxJQUUzQkQsRUFBSyxpQkFBbUJDLElBUjFCLENBU21CLG9CQUFUSyxLQUF1QkEsS0FBT0MsTUFBTSxXQUM5QyxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVIsUUFHbkMsSUFBSUMsRUFBU0ssRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFYsUUFBUyxJQVVWLE9BTkFXLEVBQVFILEdBQVVJLEtBQUtYLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNPLEdBRy9ETixFQUFPUyxHQUFJLEVBR0pULEVBQU9ELFFBMERmLE9BckRBTyxFQUFvQk0sRUFBSUYsRUFHeEJKLEVBQW9CTyxFQUFJUixFQUd4QkMsRUFBb0JRLEVBQUksU0FBU2YsRUFBU2dCLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRWxCLEVBQVNnQixJQUNsQ0csT0FBT0MsZUFBZXBCLEVBQVNnQixFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVWLEVBQW9CZ0IsRUFBSSxTQUFTdkIsR0FDWCxvQkFBWHdCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZXBCLEVBQVN3QixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVwQixFQUFTLGFBQWMsQ0FBRTBCLE9BQU8sS0FRdkRuQixFQUFvQm9CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRbkIsRUFBb0JtQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQXhCLEVBQW9CZ0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9uQixFQUFvQlEsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnZCLEVBQW9CMkIsRUFBSSxTQUFTakMsR0FDaEMsSUFBSWdCLEVBQVNoQixHQUFVQSxFQUFPNEIsV0FDN0IsV0FBd0IsT0FBTzVCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFNLEVBQW9CUSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSVixFQUFvQlcsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekc3QixFQUFvQmdDLEVBQUksR0FJakJoQyxFQUFvQkEsRUFBb0JpQyxFQUFJLEcsMlRDbEYzQixFLG1CQU1NLG1CLHlCQUNNLDZCLDZCQUNJLGlDLFlBQ2pCLGdCLDBCQUNjLDBCLG1CQVBmLDBCLGlCQUNGLHdCLHFCQVNZLG9CLG1CQUNGLEksY0FDTCxLLGdCQ1IzQixJQUFJQyxFQUFXLFNBQVV6QyxHQUN2QixhQUVBLElBQUkwQyxFQUFLdkIsT0FBT2tCLFVBQ1pNLEVBQVNELEVBQUdKLGVBRVpNLEVBQTRCLG1CQUFYcEIsT0FBd0JBLE9BQVMsR0FDbERxQixFQUFpQkQsRUFBUUUsVUFBWSxhQUNyQ0MsRUFBc0JILEVBQVFJLGVBQWlCLGtCQUMvQ0MsRUFBb0JMLEVBQVFuQixhQUFlLGdCQUUvQyxTQUFTeUIsRUFBS0MsRUFBU0MsRUFBU2hELEVBQU1pRCxHQUVwQyxJQUFJQyxFQUFpQkYsR0FBV0EsRUFBUWYscUJBQXFCa0IsRUFBWUgsRUFBVUcsRUFDL0VDLEVBQVlyQyxPQUFPWSxPQUFPdUIsRUFBZWpCLFdBQ3pDb0IsRUFBVSxJQUFJQyxFQUFRTCxHQUFlLElBTXpDLE9BRkFHLEVBQVVHLFFBcU1aLFNBQTBCUixFQUFTL0MsRUFBTXFELEdBQ3ZDLElBQUlHLEVBOUt1QixpQkFnTDNCLE9BQU8sU0FBZ0JDLEVBQVFDLEdBQzdCLEdBL0tvQixjQStLaEJGLEVBQ0YsTUFBTSxJQUFJRyxNQUFNLGdDQUdsQixHQWxMb0IsY0FrTGhCSCxFQUE2QixDQUMvQixHQUFlLFVBQVhDLEVBQ0YsTUFBTUMsRUFLUixPQUFPRSxJQU1ULElBSEFQLEVBQVFJLE9BQVNBLEVBQ2pCSixFQUFRSyxJQUFNQSxJQUVELENBQ1gsSUFBSUcsRUFBV1IsRUFBUVEsU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCQyxFQUFvQkYsRUFBVVIsR0FDbkQsR0FBSVMsRUFBZ0IsQ0FDbEIsR0FBSUEsSUFBbUJFLEVBQWtCLFNBQ3pDLE9BQU9GLEdBSVgsR0FBdUIsU0FBbkJULEVBQVFJLE9BR1ZKLEVBQVFZLEtBQU9aLEVBQVFhLE1BQVFiLEVBQVFLLFNBRWxDLEdBQXVCLFVBQW5CTCxFQUFRSSxPQUFvQixDQUNyQyxHQWxOcUIsbUJBa05qQkQsRUFFRixNQURBQSxFQWhOYyxZQWlOUkgsRUFBUUssSUFHaEJMLEVBQVFjLGtCQUFrQmQsRUFBUUssU0FFTixXQUFuQkwsRUFBUUksUUFDakJKLEVBQVFlLE9BQU8sU0FBVWYsRUFBUUssS0FHbkNGLEVBM05rQixZQTZObEIsSUFBSWEsRUFBU0MsRUFBU3ZCLEVBQVMvQyxFQUFNcUQsR0FDckMsR0FBb0IsV0FBaEJnQixFQUFPRSxLQUFtQixDQU81QixHQUpBZixFQUFRSCxFQUFRbUIsS0FoT0EsWUFGSyxpQkFzT2pCSCxFQUFPWCxNQUFRTSxFQUNqQixTQUdGLE1BQU8sQ0FDTDFDLE1BQU8rQyxFQUFPWCxJQUNkYyxLQUFNbkIsRUFBUW1CLE1BR1MsVUFBaEJILEVBQU9FLE9BQ2hCZixFQTlPZ0IsWUFpUGhCSCxFQUFRSSxPQUFTLFFBQ2pCSixFQUFRSyxJQUFNVyxFQUFPWCxPQTdRUGUsQ0FBaUIxQixFQUFTL0MsRUFBTXFELEdBRTdDRCxFQWNULFNBQVNrQixFQUFTSSxFQUFJQyxFQUFLakIsR0FDekIsSUFDRSxNQUFPLENBQUVhLEtBQU0sU0FBVWIsSUFBS2dCLEVBQUdsRSxLQUFLbUUsRUFBS2pCLElBQzNDLE1BQU9rQixHQUNQLE1BQU8sQ0FBRUwsS0FBTSxRQUFTYixJQUFLa0IsSUFoQmpDaEYsRUFBUWtELEtBQU9BLEVBb0JmLElBT0lrQixFQUFtQixHQU12QixTQUFTYixLQUNULFNBQVMwQixLQUNULFNBQVNDLEtBSVQsSUFBSUMsRUFBb0IsR0FDeEJBLEVBQWtCdEMsR0FBa0IsV0FDbEMsT0FBT3hDLE1BR1QsSUFBSStFLEVBQVdqRSxPQUFPa0UsZUFDbEJDLEVBQTBCRixHQUFZQSxFQUFTQSxFQUFTRyxFQUFPLE1BQy9ERCxHQUNBQSxJQUE0QjVDLEdBQzVCQyxFQUFPL0IsS0FBSzBFLEVBQXlCekMsS0FHdkNzQyxFQUFvQkcsR0FHdEIsSUFBSUUsRUFBS04sRUFBMkI3QyxVQUNsQ2tCLEVBQVVsQixVQUFZbEIsT0FBT1ksT0FBT29ELEdBUXRDLFNBQVNNLEVBQXNCcEQsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVXFELFNBQVEsU0FBUzdCLEdBQzNDeEIsRUFBVXdCLEdBQVUsU0FBU0MsR0FDM0IsT0FBT3pELEtBQUtzRCxRQUFRRSxFQUFRQyxPQW9DbEMsU0FBUzZCLEVBQWNuQyxFQUFXb0MsR0FnQ2hDLElBQUlDLEVBZ0NKeEYsS0FBS3NELFFBOUJMLFNBQWlCRSxFQUFRQyxHQUN2QixTQUFTZ0MsSUFDUCxPQUFPLElBQUlGLEdBQVksU0FBU0csRUFBU0MsSUFuQzdDLFNBQVNDLEVBQU9wQyxFQUFRQyxFQUFLaUMsRUFBU0MsR0FDcEMsSUFBSXZCLEVBQVNDLEVBQVNsQixFQUFVSyxHQUFTTCxFQUFXTSxHQUNwRCxHQUFvQixVQUFoQlcsRUFBT0UsS0FFSixDQUNMLElBQUl1QixFQUFTekIsRUFBT1gsSUFDaEJwQyxFQUFRd0UsRUFBT3hFLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQaUIsRUFBTy9CLEtBQUtjLEVBQU8sV0FDZGtFLEVBQVlHLFFBQVFyRSxFQUFNeUUsU0FBU0MsTUFBSyxTQUFTMUUsR0FDdER1RSxFQUFPLE9BQVF2RSxFQUFPcUUsRUFBU0MsTUFDOUIsU0FBU2hCLEdBQ1ZpQixFQUFPLFFBQVNqQixFQUFLZSxFQUFTQyxNQUkzQkosRUFBWUcsUUFBUXJFLEdBQU8wRSxNQUFLLFNBQVNDLEdBSTlDSCxFQUFPeEUsTUFBUTJFLEVBQ2ZOLEVBQVFHLE1BQ1AsU0FBU0ksR0FHVixPQUFPTCxFQUFPLFFBQVNLLEVBQU9QLEVBQVNDLE1BdkJ6Q0EsRUFBT3ZCLEVBQU9YLEtBaUNabUMsQ0FBT3BDLEVBQVFDLEVBQUtpQyxFQUFTQyxNQUlqQyxPQUFPSCxFQWFMQSxFQUFrQkEsRUFBZ0JPLEtBQ2hDTixFQUdBQSxHQUNFQSxLQWtIVixTQUFTM0IsRUFBb0JGLEVBQVVSLEdBQ3JDLElBQUlJLEVBQVNJLEVBQVNuQixTQUFTVyxFQUFRSSxRQUN2QyxRQXZTRTBDLElBdVNFMUMsRUFBc0IsQ0FLeEIsR0FGQUosRUFBUVEsU0FBVyxLQUVJLFVBQW5CUixFQUFRSSxPQUFvQixDQUU5QixHQUFJSSxFQUFTbkIsU0FBaUIsU0FHNUJXLEVBQVFJLE9BQVMsU0FDakJKLEVBQVFLLFNBbFRaeUMsRUFtVElwQyxFQUFvQkYsRUFBVVIsR0FFUCxVQUFuQkEsRUFBUUksUUFHVixPQUFPTyxFQUlYWCxFQUFRSSxPQUFTLFFBQ2pCSixFQUFRSyxJQUFNLElBQUkwQyxVQUNoQixrREFHSixPQUFPcEMsRUFHVCxJQUFJSyxFQUFTQyxFQUFTYixFQUFRSSxFQUFTbkIsU0FBVVcsRUFBUUssS0FFekQsR0FBb0IsVUFBaEJXLEVBQU9FLEtBSVQsT0FIQWxCLEVBQVFJLE9BQVMsUUFDakJKLEVBQVFLLElBQU1XLEVBQU9YLElBQ3JCTCxFQUFRUSxTQUFXLEtBQ1pHLEVBR1QsSUFBSXFDLEVBQU9oQyxFQUFPWCxJQUVsQixPQUFNMkMsRUFPRkEsRUFBSzdCLE1BR1BuQixFQUFRUSxFQUFTeUMsWUFBY0QsRUFBSy9FLE1BR3BDK0IsRUFBUWtELEtBQU8xQyxFQUFTMkMsUUFRRCxXQUFuQm5ELEVBQVFJLFNBQ1ZKLEVBQVFJLE9BQVMsT0FDakJKLEVBQVFLLFNBdFdWeUMsR0FnWEY5QyxFQUFRUSxTQUFXLEtBQ1pHLEdBTkVxQyxHQTNCUGhELEVBQVFJLE9BQVMsUUFDakJKLEVBQVFLLElBQU0sSUFBSTBDLFVBQVUsb0NBQzVCL0MsRUFBUVEsU0FBVyxLQUNaRyxHQW9EWCxTQUFTeUMsRUFBYUMsR0FDcEIsSUFBSUMsRUFBUSxDQUFFQyxPQUFRRixFQUFLLElBRXZCLEtBQUtBLElBQ1BDLEVBQU1FLFNBQVdILEVBQUssSUFHcEIsS0FBS0EsSUFDUEMsRUFBTUcsV0FBYUosRUFBSyxHQUN4QkMsRUFBTUksU0FBV0wsRUFBSyxJQUd4QnpHLEtBQUsrRyxXQUFXQyxLQUFLTixHQUd2QixTQUFTTyxFQUFjUCxHQUNyQixJQUFJdEMsRUFBU3NDLEVBQU1RLFlBQWMsR0FDakM5QyxFQUFPRSxLQUFPLGdCQUNQRixFQUFPWCxJQUNkaUQsRUFBTVEsV0FBYTlDLEVBR3JCLFNBQVNmLEVBQVFMLEdBSWZoRCxLQUFLK0csV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0IzRCxFQUFZcUMsUUFBUW1CLEVBQWN4RyxNQUNsQ0EsS0FBS21ILE9BQU0sR0E4QmIsU0FBU2pDLEVBQU9rQyxHQUNkLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkQsRUFBUzVFLEdBQzlCLEdBQUk2RSxFQUNGLE9BQU9BLEVBQWU5RyxLQUFLNkcsR0FHN0IsR0FBNkIsbUJBQWxCQSxFQUFTZCxLQUNsQixPQUFPYyxFQUdULElBQUtFLE1BQU1GLEVBQVNHLFFBQVMsQ0FDM0IsSUFBSW5ILEdBQUssRUFBR2tHLEVBQU8sU0FBU0EsSUFDMUIsT0FBU2xHLEVBQUlnSCxFQUFTRyxRQUNwQixHQUFJakYsRUFBTy9CLEtBQUs2RyxFQUFVaEgsR0FHeEIsT0FGQWtHLEVBQUtqRixNQUFRK0YsRUFBU2hILEdBQ3RCa0csRUFBSy9CLE1BQU8sRUFDTCtCLEVBT1gsT0FIQUEsRUFBS2pGLFdBdGRUNkUsRUF1ZElJLEVBQUsvQixNQUFPLEVBRUwrQixHQUdULE9BQU9BLEVBQUtBLEtBQU9BLEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTTNDLEdBSWpCLFNBQVNBLElBQ1AsTUFBTyxDQUFFdEMsV0F0ZVA2RSxFQXNleUIzQixNQUFNLEdBK01uQyxPQTNtQkFLLEVBQWtCNUMsVUFBWW1ELEVBQUdxQyxZQUFjM0MsRUFDL0NBLEVBQTJCMkMsWUFBYzVDLEVBQ3pDQyxFQUEyQmpDLEdBQ3pCZ0MsRUFBa0I2QyxZQUFjLG9CQVlsQzlILEVBQVErSCxvQkFBc0IsU0FBU0MsR0FDckMsSUFBSUMsRUFBeUIsbUJBQVhELEdBQXlCQSxFQUFPSCxZQUNsRCxRQUFPSSxJQUNIQSxJQUFTaEQsR0FHMkIsdUJBQW5DZ0QsRUFBS0gsYUFBZUcsRUFBS2pILFFBSWhDaEIsRUFBUWtJLEtBQU8sU0FBU0YsR0FVdEIsT0FUSTdHLE9BQU9nSCxlQUNUaEgsT0FBT2dILGVBQWVILEVBQVE5QyxJQUU5QjhDLEVBQU9JLFVBQVlsRCxFQUNiakMsS0FBcUIrRSxJQUN6QkEsRUFBTy9FLEdBQXFCLHNCQUdoQytFLEVBQU8zRixVQUFZbEIsT0FBT1ksT0FBT3lELEdBQzFCd0MsR0FPVGhJLEVBQVFxSSxNQUFRLFNBQVN2RSxHQUN2QixNQUFPLENBQUVxQyxRQUFTckMsSUFzRXBCMkIsRUFBc0JFLEVBQWN0RCxXQUNwQ3NELEVBQWN0RCxVQUFVVSxHQUF1QixXQUM3QyxPQUFPMUMsTUFFVEwsRUFBUTJGLGNBQWdCQSxFQUt4QjNGLEVBQVFzSSxNQUFRLFNBQVNuRixFQUFTQyxFQUFTaEQsRUFBTWlELEVBQWF1QyxRQUN4QyxJQUFoQkEsSUFBd0JBLEVBQWMyQyxTQUUxQyxJQUFJQyxFQUFPLElBQUk3QyxFQUNiekMsRUFBS0MsRUFBU0MsRUFBU2hELEVBQU1pRCxHQUM3QnVDLEdBR0YsT0FBTzVGLEVBQVErSCxvQkFBb0IzRSxHQUMvQm9GLEVBQ0FBLEVBQUs3QixPQUFPUCxNQUFLLFNBQVNGLEdBQ3hCLE9BQU9BLEVBQU90QixLQUFPc0IsRUFBT3hFLE1BQVE4RyxFQUFLN0IsV0F1S2pEbEIsRUFBc0JELEdBRXRCQSxFQUFHdkMsR0FBcUIsWUFPeEJ1QyxFQUFHM0MsR0FBa0IsV0FDbkIsT0FBT3hDLE1BR1RtRixFQUFHaUQsU0FBVyxXQUNaLE1BQU8sc0JBa0NUekksRUFBUTBJLEtBQU8sU0FBU3ZHLEdBQ3RCLElBQUl1RyxFQUFPLEdBQ1gsSUFBSyxJQUFJMUcsS0FBT0csRUFDZHVHLEVBQUtyQixLQUFLckYsR0FNWixPQUpBMEcsRUFBS0MsVUFJRSxTQUFTaEMsSUFDZCxLQUFPK0IsRUFBS2QsUUFBUSxDQUNsQixJQUFJNUYsRUFBTTBHLEVBQUtFLE1BQ2YsR0FBSTVHLEtBQU9HLEVBR1QsT0FGQXdFLEVBQUtqRixNQUFRTSxFQUNiMkUsRUFBSy9CLE1BQU8sRUFDTCtCLEVBUVgsT0FEQUEsRUFBSy9CLE1BQU8sRUFDTCtCLElBc0NYM0csRUFBUXVGLE9BQVNBLEVBTWpCN0IsRUFBUXJCLFVBQVksQ0FDbEJ3RixZQUFhbkUsRUFFYjhELE1BQU8sU0FBU3FCLEdBY2QsR0FiQXhJLEtBQUt5SSxLQUFPLEVBQ1p6SSxLQUFLc0csS0FBTyxFQUdadEcsS0FBS2dFLEtBQU9oRSxLQUFLaUUsV0FqZmpCaUMsRUFrZkFsRyxLQUFLdUUsTUFBTyxFQUNadkUsS0FBSzRELFNBQVcsS0FFaEI1RCxLQUFLd0QsT0FBUyxPQUNkeEQsS0FBS3lELFNBdGZMeUMsRUF3ZkFsRyxLQUFLK0csV0FBVzFCLFFBQVE0QixJQUVuQnVCLEVBQ0gsSUFBSyxJQUFJN0gsS0FBUVgsS0FFUSxNQUFuQlcsRUFBSytILE9BQU8sSUFDWnBHLEVBQU8vQixLQUFLUCxLQUFNVyxLQUNqQjJHLE9BQU8zRyxFQUFLZ0ksTUFBTSxNQUNyQjNJLEtBQUtXLFFBaGdCWHVGLElBc2dCRjBDLEtBQU0sV0FDSjVJLEtBQUt1RSxNQUFPLEVBRVosSUFDSXNFLEVBRFk3SSxLQUFLK0csV0FBVyxHQUNMRyxXQUMzQixHQUF3QixVQUFwQjJCLEVBQVd2RSxLQUNiLE1BQU11RSxFQUFXcEYsSUFHbkIsT0FBT3pELEtBQUs4SSxNQUdkNUUsa0JBQW1CLFNBQVM2RSxHQUMxQixHQUFJL0ksS0FBS3VFLEtBQ1AsTUFBTXdFLEVBR1IsSUFBSTNGLEVBQVVwRCxLQUNkLFNBQVNnSixFQUFPQyxFQUFLQyxHQVluQixPQVhBOUUsRUFBT0UsS0FBTyxRQUNkRixFQUFPWCxJQUFNc0YsRUFDYjNGLEVBQVFrRCxLQUFPMkMsRUFFWEMsSUFHRjlGLEVBQVFJLE9BQVMsT0FDakJKLEVBQVFLLFNBamlCWnlDLEtBb2lCWWdELEVBR1osSUFBSyxJQUFJOUksRUFBSUosS0FBSytHLFdBQVdRLE9BQVMsRUFBR25ILEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJc0csRUFBUTFHLEtBQUsrRyxXQUFXM0csR0FDeEJnRSxFQUFTc0MsRUFBTVEsV0FFbkIsR0FBcUIsU0FBakJSLEVBQU1DLE9BSVIsT0FBT3FDLEVBQU8sT0FHaEIsR0FBSXRDLEVBQU1DLFFBQVUzRyxLQUFLeUksS0FBTSxDQUM3QixJQUFJVSxFQUFXN0csRUFBTy9CLEtBQUttRyxFQUFPLFlBQzlCMEMsRUFBYTlHLEVBQU8vQixLQUFLbUcsRUFBTyxjQUVwQyxHQUFJeUMsR0FBWUMsRUFBWSxDQUMxQixHQUFJcEosS0FBS3lJLEtBQU8vQixFQUFNRSxTQUNwQixPQUFPb0MsRUFBT3RDLEVBQU1FLFVBQVUsR0FDekIsR0FBSTVHLEtBQUt5SSxLQUFPL0IsRUFBTUcsV0FDM0IsT0FBT21DLEVBQU90QyxFQUFNRyxpQkFHakIsR0FBSXNDLEdBQ1QsR0FBSW5KLEtBQUt5SSxLQUFPL0IsRUFBTUUsU0FDcEIsT0FBT29DLEVBQU90QyxFQUFNRSxVQUFVLE9BRzNCLEtBQUl3QyxFQU1ULE1BQU0sSUFBSTFGLE1BQU0sMENBTGhCLEdBQUkxRCxLQUFLeUksS0FBTy9CLEVBQU1HLFdBQ3BCLE9BQU9tQyxFQUFPdEMsRUFBTUcsZ0JBVTlCMUMsT0FBUSxTQUFTRyxFQUFNYixHQUNyQixJQUFLLElBQUlyRCxFQUFJSixLQUFLK0csV0FBV1EsT0FBUyxFQUFHbkgsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlzRyxFQUFRMUcsS0FBSytHLFdBQVczRyxHQUM1QixHQUFJc0csRUFBTUMsUUFBVTNHLEtBQUt5SSxNQUNyQm5HLEVBQU8vQixLQUFLbUcsRUFBTyxlQUNuQjFHLEtBQUt5SSxLQUFPL0IsRUFBTUcsV0FBWSxDQUNoQyxJQUFJd0MsRUFBZTNDLEVBQ25CLE9BSUEyQyxJQUNVLFVBQVQvRSxHQUNTLGFBQVRBLElBQ0QrRSxFQUFhMUMsUUFBVWxELEdBQ3ZCQSxHQUFPNEYsRUFBYXhDLGFBR3RCd0MsRUFBZSxNQUdqQixJQUFJakYsRUFBU2lGLEVBQWVBLEVBQWFuQyxXQUFhLEdBSXRELE9BSEE5QyxFQUFPRSxLQUFPQSxFQUNkRixFQUFPWCxJQUFNQSxFQUVUNEYsR0FDRnJKLEtBQUt3RCxPQUFTLE9BQ2R4RCxLQUFLc0csS0FBTytDLEVBQWF4QyxXQUNsQjlDLEdBR0YvRCxLQUFLc0osU0FBU2xGLElBR3ZCa0YsU0FBVSxTQUFTbEYsRUFBUTBDLEdBQ3pCLEdBQW9CLFVBQWhCMUMsRUFBT0UsS0FDVCxNQUFNRixFQUFPWCxJQWNmLE1BWG9CLFVBQWhCVyxFQUFPRSxNQUNTLGFBQWhCRixFQUFPRSxLQUNUdEUsS0FBS3NHLEtBQU9sQyxFQUFPWCxJQUNNLFdBQWhCVyxFQUFPRSxNQUNoQnRFLEtBQUs4SSxLQUFPOUksS0FBS3lELElBQU1XLEVBQU9YLElBQzlCekQsS0FBS3dELE9BQVMsU0FDZHhELEtBQUtzRyxLQUFPLE9BQ2EsV0FBaEJsQyxFQUFPRSxNQUFxQndDLElBQ3JDOUcsS0FBS3NHLEtBQU9RLEdBR1AvQyxHQUdUd0YsT0FBUSxTQUFTMUMsR0FDZixJQUFLLElBQUl6RyxFQUFJSixLQUFLK0csV0FBV1EsT0FBUyxFQUFHbkgsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlzRyxFQUFRMUcsS0FBSytHLFdBQVczRyxHQUM1QixHQUFJc0csRUFBTUcsYUFBZUEsRUFHdkIsT0FGQTdHLEtBQUtzSixTQUFTNUMsRUFBTVEsV0FBWVIsRUFBTUksVUFDdENHLEVBQWNQLEdBQ1AzQyxJQUtiLE1BQVMsU0FBUzRDLEdBQ2hCLElBQUssSUFBSXZHLEVBQUlKLEtBQUsrRyxXQUFXUSxPQUFTLEVBQUduSCxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSXNHLEVBQVExRyxLQUFLK0csV0FBVzNHLEdBQzVCLEdBQUlzRyxFQUFNQyxTQUFXQSxFQUFRLENBQzNCLElBQUl2QyxFQUFTc0MsRUFBTVEsV0FDbkIsR0FBb0IsVUFBaEI5QyxFQUFPRSxLQUFrQixDQUMzQixJQUFJa0YsRUFBU3BGLEVBQU9YLElBQ3BCd0QsRUFBY1AsR0FFaEIsT0FBTzhDLEdBTVgsTUFBTSxJQUFJOUYsTUFBTSwwQkFHbEIrRixjQUFlLFNBQVNyQyxFQUFVZixFQUFZRSxHQWE1QyxPQVpBdkcsS0FBSzRELFNBQVcsQ0FDZG5CLFNBQVV5QyxFQUFPa0MsR0FDakJmLFdBQVlBLEVBQ1pFLFFBQVNBLEdBR1MsU0FBaEJ2RyxLQUFLd0QsU0FHUHhELEtBQUt5RCxTQTFxQlB5QyxHQTZxQk9uQyxJQVFKcEUsRUExckJLLENBaXNCaUJDLEVBQU9ELFNBR3RDLElBQ0UrSixtQkFBcUJ0SCxFQUNyQixNQUFPdUgsR0FVUEMsU0FBUyxJQUFLLHlCQUFkQSxDQUF3Q3hILEssK0ZDdnRCMUMsV0FNQSxPQVdBLFVBQ0EsVUFHQSxVLHloQkFHTXlILEUsV0FDSixXQUFZQyxFQUFTQyxHQUNuQixHLDRGQUQ0QixTQUN4QkQsR0FBOEIsbUJBQVpBLEVBQ3BCLE1BQU0sSUFBSXBHLE1BQU0saURBR2xCLEdBQUlxRyxHQUE4QixtQkFBWkEsRUFDcEIsTUFBTSxJQUFJckcsTUFBTSxpREFHbEIxRCxLQUFLZ0ssYUFBTCxpQkFDQWhLLEtBQUs4SixRQUFVQSxHQUFXLEVBQUosS0FDdEI5SixLQUFLK0osUUFBVUEsR0FBVyxFQUFKLEssMERBR3BCRSxHQUNGQyxRQUFRQyxJQUFJLGNBQWVGLEssbUpBSXJCRyxFQUFXQyxLQUFLQyxpQkFBaUJDLGtCQUFrQkMsUyxTQUNsQ0MsTUFBTXpLLEtBQUtnSyxhQUFlLFlBQWNJLEcsY0FBekRNLEUsZ0JBQ2lCQSxFQUFTQyxPLGNBQTFCQyxFLHlCQUVDQSxHLGtJQUlQLE1BQW1DLFlBQTVCQyxhQUFhQyxhLHdDQUlwQjlLLEtBQUsrSyxTQUFMLDhCQUEwQyxLLDBDQUkxQy9LLEtBQUsrSyxTQUFMLDhCQUEwQyxLLCtCQUduQ3BKLEVBQUtxSixHQUNaQyxhQUFhQyxRQUFRdkosRUFBS3FKLEssK0JBR25CckosR0FDUCxPQUFPc0osYUFBYUUsUUFBUXhKLEssa0NBUTVCLE9BSmMsRUFBRCxXQUVWNUIsS0FBS3FMLFFBQVVyTCxLQUFLcUwsT0FBT0Msc0JBQXdCLFNBRHBELGlCLG1DQU9GLElBQU1DLEVBQU90TCxLQUFLdUwsWUFFbEIsT0FBT0MsVUFBVUMsY0FBY0MsU0FBU0osSyxxQ0FHM0JLLEVBQWNmLEdBQzNCLE1BQU8sQ0FDTGdCLFFBQVNoQixFQUFTZ0IsUUFDbEJDLFdBQVlqQixFQUFTaUIsV0FDckJDLFlBQWFsQixFQUFTa0IsWUFDdEJDLE1BQU9uQixFQUFTbUIsTUFDaEJDLFlBQWFwQixFQUFTb0IsWUFDdEJDLElBQUksSUFBSUMsTUFBT0Msb0JBQXNCLEdBQ3JDQyxXQUFZeEIsRUFBU3dCLFdBQ3JCQyxRQUFTekIsRUFBU3lCLFFBQ2xCQyxTQUFVWCxFQUFhVyxTQUN2QkMsS0FBTVosRUFBYXRELEtBQUtrRSxLQUN4QkMsT0FBUWIsRUFBYXRELEtBQUttRSxPQUMxQkMsU0FBVXJCLE9BQU9zQixTQUFTQyxTQUMxQkMsVUFBVzVNLEtBQUs2TSxZLHNEQUlMQyxHLHdHQUVPckMsTUFBTXpLLEtBQUtnSyxhQUFlLFFBQVMsQ0FDbkR4RyxPQUFRLE9BQ1J1SixLQUFNQyxLQUFLQyxVQUFVSCxLLGNBRmpCSSxFLGdCQUtXQSxFQUFJQyxPLE9BQWZDLEUsT0FFTnBOLEtBQUsrSyxTQUFMLFlBQXlCcUMsR0FDekJwTixLQUFLcU4sa0JBRURyTixLQUFLc04sU0FDUHROLEtBQUt1TixZQUdQdk4sS0FBS21LLElBQUksbUIsa0RBRVRuSyxLQUFLbUssSUFBTCxNLHVKQUs4QixZQUE1QlUsYUFBYUMsWUFDakI5SyxLQUFLd04sc0IsNERBR2M1QyxHLHFHQUVYNkMsRUFBc0IsQ0FDMUJDLGlCQUFpQixFQUNqQkMsc0JBQXNCLElBQUFDLHVCQUFzQmhELEVBQVNpRCxnQixTQUc1QjdOLEtBQUs4TixhQUFhQyxZQUFZQyxVQUFVUCxHLE9BQTdEOUIsRSxPQUVGSCxVQUFVQyxjQUFjd0MsWUFDMUJ6QyxVQUFVQyxjQUFjd0MsV0FBV0MsWUFBWSxDQUM3Q0MsT0FBUSxFQUFGLHdCQUNOeEMsYUFBY3FCLEtBQUtvQixNQUFNcEIsS0FBS0MsVUFBVXRCLE1BSTVDM0wsS0FBSzhKLFVBRUN1RSxFQUFjckIsS0FBS0MsVUFBVXRCLEdBQzdCMkMsRUFBU3RCLEtBQUtvQixNQUFNQyxHQUNwQkUsRUFBYXZPLEtBQUt3TyxlQUFlRixFQUFRMUQsR0FFL0M1SyxLQUFLeU8sU0FBU0YsR0FFVjNELEVBQVM4RCxJQUNYMU8sS0FBSzJPLHdCQUF3Qi9ELEcsa0RBRy9CNUssS0FBS21LLElBQUwsTUFDQW5LLEtBQUttSyxJQUFJLGlCQUNUbkssS0FBSytKLFUsc0pBSWVhLEdBQ3RCLElBQ0UsSUFBTWdFLEVBQVk1QixLQUFLb0IsTUFBTVMsbUJBQW1CQyxLQUFLbEUsRUFBU21FLGNBRTlEL08sS0FBSzhOLGFBQWFrQixpQkFBaUJKLEVBQVVLLE1BQU8sQ0FDbERsQyxLQUFNNkIsRUFBVU0sWUFDaEJDLEtBQU0sQ0FBRUMsSUFBS1IsRUFBVVEsT0FFekIsTUFBT3pLLEdBQ1AzRSxLQUFLbUssSUFBSXhGLE0sbUNBSUF5SyxJQUNDLElBQUlDLE9BRVpDLElBQU1GLEksc0NBR0l4RSxFQUFVMkUsR0FBWSxXQUM5QkMsR0FBTSxhQUFhRCxHQUNuQkUsR0FBTyxhQUFTRixHQUVsQkEsRUFBV0csTUFDYjFQLEtBQUsyUCxhQUFhSixFQUFXRyxNQUcvQixJQUFNRSxFQUFXQyxTQUFTQyxjQUFjLFNBRXhDRixFQUFTRyxVQUFZUCxFQUVyQixJQUFNUSxFQUFXSCxTQUFTSSx5QkFDcEIzQyxFQUFVdUMsU0FBU0MsY0FBYyxPQUV2Q3hDLEVBQVE0QyxVQUFVQyxJQUFJLG1CQUN0QjdDLEVBQVE0QyxVQUFVQyxJQUFJLDBCQUN0QjdDLEVBQVF5QyxVQUFZTixFQUVwQnpQLEtBQUtzTixRQUFVQSxFQUVEQSxFQUFROEMsY0FBYyxzQkFFOUJDLGlCQUFpQixTQUFTLFNBQUNDLEdBQy9CLEVBQUsvQyxZQUNMLEVBQUtnRCwrQkFHU2pELEVBQVE4QyxjQUFjLHdCQUU5QkMsaUJBQWlCLFNBQVMsU0FBQ0MsR0FDakMsRUFBSy9DLFlBQ0wsRUFBS2lELGVBQWU1RixNQUd0Qm9GLEVBQVNTLFlBQVluRCxHQUNyQnVDLFNBQVNhLEtBQUtELFlBQVliLEdBQzFCQyxTQUFTOUMsS0FBSzBELFlBQVlULEdBRTFCMUMsRUFBUTRDLFVBQVVTLE9BQU8sNEIsa0NBSXpCM1EsS0FBS3NOLFFBQVFzRCxNQUFNQyxRQUFVLFMsNkNBR1JDLEdBQ3JCLElBQU1DLEVBQW1CL1EsS0FBS2dSLDhCQUN4QkMsRUFBWWpSLEtBQUtrUixZQUV2QixPQUF5QixJQUFyQkgsR0FDRUUsR0FBY0YsRUFBbUJELEksZ0NBVS9CbEcsR0FBVSxXQUNsQixHQUE2QixXQUF6QkEsRUFBU3VHLFlBQTBCLENBQ3JDLElBQU01QixFQUFhdkMsS0FBS29CLE1BQU1VLEtBQUtsRSxFQUFTd0csU0FFeEM3QixFQUFXOEIsaUJBQ2JyUixLQUFLbUssSUFBSSxrQ0FDVG5LLEtBQUtzUixnQkFBZ0IxRyxFQUFVMkUsSUFFaEJ2UCxLQUFLa1IsYUFFTjNCLEVBQVdnQyxlQUFpQnZSLEtBQUt3Uix1QkFBdUJqQyxFQUFXa0MsaUJBQy9FelIsS0FBS21LLElBQUksNEJBQ1R1SCxZQUFXLFdBQ1QsRUFBS0osZ0JBQWdCMUcsRUFBVTJFLEtBQ1AsSUFBdkJBLEVBQVdvQyxpQkFJbEIzUixLQUFLbUssSUFBSSxzQkFDVG5LLEtBQUt3USxlQUFlNUYsSyxpQ0FLdEIsSUFBTWdILEVBQVM1UixLQUFLNlIsU0FBTCxxQkFBbUMsRUFFbEQ3UixLQUFLK0ssU0FBTCxvQkFBaUM2RyxFQUFTLEssa0RBSTFDLElBQU1BLEVBQVM1UixLQUFLNlIsU0FBTCxvQkFFZjdSLEtBQUsrSyxTQUFMLHlCQUFzQzZHLEssb0RBSXRDLElBQU1BLEVBQVM1RSxLQUFLb0IsTUFBTXBPLEtBQUs2UixTQUFMLDJCQUUxQixPQUFJRCxHQUlHLEksa0NBSVAsT0FBTzVFLEtBQUtvQixNQUFNcE8sS0FBSzZSLFNBQUwsc0JBQW9DLEksa0RBaUM3Q2hGLEcsZ0ZBQ1Q3TSxLQUFLOFIsV0FDTDlSLEtBQUs2TSxTQUFXQSxFQUVWLGtCQUFtQnJCLFUsb0RBQ25CLGdCQUFpQkosTyxpRUFFR3BMLEtBQUsrUixhLFVBQS9CL1IsS0FBSzhOLGEsUUFFRDlOLEtBQUtnUyxlLHdCQUNQaFMsS0FBS21LLElBQUksb0IsVUFDY25LLEtBQUtpUyxjLFFBQXRCckgsRSxPQUVONUssS0FBS2tTLFVBQVV0SCxHLHdCQUVmNUssS0FBS21TLHlCLHlJQTdDY0MsR0FDckIsSUFDTUMsRUFEUyxJQUFJQyxnQkFBZ0JsSCxPQUFPc0IsU0FBUzZGLFFBQ3pCdFIsSUFBSSxTQUUxQm9SLEdBQWNELElBQVUsSUFBQUksY0FBYUgsSUFDdkM1SCxNQUFNLEdBQUQsNkNBQStCNEgsRUFBL0IsbUJBQW9ERCxNLDhCQUk5Q0ssR0FDYixJQUFNQyxFQUFlMUYsS0FBS29CLE1BQU1uRCxhQUFhRSxRQUFiLCtCQUMxQndILEVBQU0zRixLQUFLb0IsTUFBTW5ELGFBQWFFLFFBQWIsY0FFbEJ1SCxHQUFpQkMsSUFJakJDLE1BQU1DLFFBQVEsU0FBMkIsaUJBQVRKLElBQ25DQSxFQUFPLENBQUNBLElBR1ZoSSxNQUFNLEdBQUQsaUNBQTJCLENBQzlCakgsT0FBUSxPQUNSdUosS0FBTUMsS0FBS0MsVUFBVSxDQUNuQjZGLFdBQVlILEVBQ1pGLGUsbUNBeUJSckgsT0FBT3ZCLFNBQVdBLEUsTUFDSEEsRSxzSEN4VlIsYSx3QkFFQSxTQUErQmtKLEdBU3BDLElBUkEsSUFBSUMsRUFBVSxJQUFJQyxRQUFRLEVBQUlGLEVBQWF4TCxPQUFTLEdBQUssR0FDckQyTCxHQUFVSCxFQUFlQyxHQUMxQkcsUUFBUSxNQUFPLEtBQ2ZBLFFBQVEsS0FBTSxLQUViQyxFQUFVaEksT0FBTzBELEtBQUtvRSxHQUN0QkcsRUFBYyxJQUFJQyxXQUFXRixFQUFRN0wsUUFFaENuSCxFQUFJLEVBQUdBLEVBQUlnVCxFQUFRN0wsU0FBVW5ILEVBQ3BDaVQsRUFBWWpULEdBQUtnVCxFQUFRRyxXQUFXblQsR0FFdEMsT0FBT2lULEcsZUFHRixTQUFzQkcsR0FDM0IsSUFDRSxPQUFPQyxLQUFLM0UsS0FBSzBFLE1BQVVBLEVBQzNCLE1BQU83TyxHQUNQLE9BQU8sSyx5R0NyQkksU0FBQzRLLEdBQ2QsMEhBR1FBLEVBQVdHLEtBQVgsNERBQ3dDSCxFQUFXRyxLQUFPLHNCQUF3QixxQkFEbEYscUNBRWNILEVBQVdHLEtBRnpCLDZDQUlFLEdBUFYsaUZBV1dILEVBQVdtRSxXQVh0QixrTEFrQlVuRSxFQUFXb0UsZUFBaUIsR0FBSyxtQkFsQjNDLG9HQXVCMENwRSxFQUFXcUUsWUF2QnJELGtFQXdCNENyRSxFQUFXc0UsWUF4QnZELDRDLDhIQ0RhLFNBQUN0RSxHQUNkLHdXQWNrQkEsRUFBV3VFLGdCQWQ3QiwyQkFlYXZFLEVBQVd3RSxVQWZ4Qixpc0JBMkNheEUsRUFBV3dFLFVBM0N4QixrcUNBZ0drQnhFLEVBQVd5RSxpQkFoRzdCLDJCQWlHYXpFLEVBQVcwRSxlQWpHeEIsc0ZBcUdrQjFFLEVBQVcyRSxpQkFyRzdCLDJCQXNHYTNFLEVBQVc0RSxlQXRHeEIsdXVDIiwiZmlsZSI6Imluc3RhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJyZWFpbS13ZWItc2RrXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInJlYWltLXdlYi1zZGtcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVhaW0td2ViLXNka1wiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJleHBvcnQgY29uc3QgUFJPRFVDVElPTiA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpO1xuY29uc3QgTE9DQUxfRVZFTlRTX0FQSSA9ICdodHRwOi8vbG9jYWxob3N0OjU1NTUnO1xuY29uc3QgTE9DQUxfU1VCU19BUEkgPSAnaHR0cDovL2xvY2FsaG9zdDo0MzQzJztcbmNvbnN0IFBST0RfRVZFTlRTX0FQSSA9ICdodHRwczovL2V2ZW50cy5yZWFpbS5tZSc7XG5jb25zdCBQUk9EX1NVQlNfQVBJID0gJ2h0dHBzOi8vc3Vicy5yZWFpbS5tZSc7XG5cbmV4cG9ydCBjb25zdCBSRUFJTV9TREtfVklTSVRTID0gJ3JlYWltX3Nka192aXNpdHMnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX0RFTklFRF9PTl9WSVNJVFMgPSAncmVhaW1fc2RrX2RlbmllZF9vbl92aXNpdHMnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1BVU0hfVVNFUl9TVUJTQ1JJQkVEID0gJ3JlYWltX3Nka19wdXNoX3VzZXJfc3Vic2NyaWJlZCc7XG5leHBvcnQgY29uc3QgUkVBSU1fVUlEID0gJ3JlYWltX3Nka191aWQnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1NBVkVfU1VCU0NSSVBUSU9OID0gJ3JlYWltX3NhdmVfc3Vic2NyaXB0aW9uJztcbmV4cG9ydCBjb25zdCBSRUFJTV9FVkVOVFNfQVBJID0gIVBST0RVQ1RJT04gPyBMT0NBTF9FVkVOVFNfQVBJIDogUFJPRF9FVkVOVFNfQVBJO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1NVQlNfQVBJID0gIVBST0RVQ1RJT04gPyBMT0NBTF9TVUJTX0FQSSA6IFBST0RfU1VCU19BUEk7XG5leHBvcnQgY29uc3QgUkVBSU1fU1RPUkFHRV9OQU1FID0gJ3JlYWltX3Nka19zdG9yYWdlJztcbmV4cG9ydCBjb25zdCBSRUFJTV9JTVBSRVNTSU9OID0gJ2knO1xuZXhwb3J0IGNvbnN0IFJFQUlNX0NMSUNLID0gJ2MnO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsImltcG9ydCB7XG4gIG5vb3AsXG4gIHVybEJhc2U2NFRvVWludDhBcnJheSxcbiAgaXNWYWxpZFRva2VuXG59IGZyb20gJy4vaGVscGVycyc7XG5cbmltcG9ydCB7XG4gIFJFQUlNX1NES19WSVNJVFMsXG4gIFJFQUlNX0RFTklFRF9PTl9WSVNJVFMsXG4gIFJFQUlNX1BVU0hfVVNFUl9TVUJTQ1JJQkVELFxuICBSRUFJTV9VSUQsXG4gIFJFQUlNX1NVQlNfQVBJLFxuICBSRUFJTV9FVkVOVFNfQVBJLFxuICBSRUFJTV9TQVZFX1NVQlNDUklQVElPTixcbiAgUFJPRFVDVElPTlxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCByZW5kZXJVSSBmcm9tICcuL2h0bWwnO1xuaW1wb3J0IHJlbmRlclN0eWxlcyBmcm9tICcuL2Nzcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUnO1xuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5jbGFzcyBSZUFpbVNESyB7XG4gIGNvbnN0cnVjdG9yKG9uQWxsb3csIG9uQmxvY2spIHtcbiAgICBpZiAob25BbGxvdyAmJiB0eXBlb2Ygb25BbGxvdyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUeXBlIG9mIG9uQWxsb3cgcGFyYW1ldGVyIHNob3VsZCBiZSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAob25CbG9jayAmJiB0eXBlb2Ygb25CbG9jayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUeXBlIG9mIG9uQmxvY2sgcGFyYW1ldGVyIHNob3VsZCBiZSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB0aGlzLm1ldGFFbmRwb2ludCA9IFJFQUlNX1NVQlNfQVBJO1xuICAgIHRoaXMub25BbGxvdyA9IG9uQWxsb3cgfHwgbm9vcDtcbiAgICB0aGlzLm9uQmxvY2sgPSBvbkJsb2NrIHx8IG5vb3A7XG4gIH1cblxuICBsb2cobXNnKSB7XG4gICAgY29uc29sZS5sb2coJ1JlQWltIFNESyAtJywgbXNnKTtcbiAgfVxuXG4gIGFzeW5jIGdldE1ldGFkYXRhKCkge1xuICAgIGNvbnN0IHRpbWV6b25lID0gSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5tZXRhRW5kcG9pbnQgKyAnL2luZm8/dHo9JyArIHRpbWV6b25lKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfVxuXG4gIGNhblN1YnNjcmliZSgpIHtcbiAgICByZXR1cm4gTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdkZWZhdWx0JztcbiAgfVxuXG4gIHNldEFzU3Vic2NyaWJlZCgpIHtcbiAgICB0aGlzLnNldFZhbHVlKFJFQUlNX1BVU0hfVVNFUl9TVUJTQ1JJQkVELCB0cnVlKTtcbiAgfVxuXG4gIHNldEFzVW5zdWJzY3JpYmVkKCkge1xuICAgIHRoaXMuc2V0VmFsdWUoUkVBSU1fUFVTSF9VU0VSX1NVQlNDUklCRUQsIGZhbHNlKTtcbiAgfVxuXG4gIHNldFZhbHVlKGtleSwgdmFsKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWwpO1xuICB9XG5cbiAgZ2V0VmFsdWUoa2V5KSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIH1cblxuICBnZXRTV1BhdGgoKSB7XG4gICAgY29uc3QgcGF0aCA9ICFQUk9EVUNUSU9OID9cbiAgICAgICcvcmVhaW0tc3cuanMnIDpcbiAgICAgIChzZWxmLndpbmRvdyAmJiBzZWxmLndpbmRvdy5SRUFJTV9TV19QQVRIX0dMT0JBTCB8fCAnL3N3LmpzJyk7XG5cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIHJlZ2lzdGVyU1coKSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0U1dQYXRoKCk7XG5cbiAgICByZXR1cm4gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIocGF0aCk7XG4gIH1cblxuICBwcmVwYXJlUmVxdWVzdChzdWJzY3JpcHRpb24sIG1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpdGVfaWQ6IG1ldGFkYXRhLnNpdGVfaWQsXG4gICAgICBjb3VudHJ5X2lkOiBtZXRhZGF0YS5jb3VudHJ5X2lkLFxuICAgICAgcGxhdGZvcm1faWQ6IG1ldGFkYXRhLnBsYXRmb3JtX2lkLFxuICAgICAgb3NfaWQ6IG1ldGFkYXRhLm9zX2lkLFxuICAgICAgdGltZXpvbmVfaWQ6IG1ldGFkYXRhLnRpbWV6b25lX2lkLFxuICAgICAgdHo6IG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwLFxuICAgICAgYnJvd3Nlcl9pZDogbWV0YWRhdGEuYnJvd3Nlcl9pZCxcbiAgICAgIHVzZXJfaWQ6IG1ldGFkYXRhLnVzZXJfaWQsXG4gICAgICBlbmRwb2ludDogc3Vic2NyaXB0aW9uLmVuZHBvaW50LFxuICAgICAgYXV0aDogc3Vic2NyaXB0aW9uLmtleXMuYXV0aCxcbiAgICAgIHAyNTZkaDogc3Vic2NyaXB0aW9uLmtleXMucDI1NmRoLFxuICAgICAgcGFnZV91cmw6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNpdGVzX3VpZDogdGhpcy5zaXRlc1VJRFxuICAgIH07XG4gIH1cblxuICBhc3luYyBzYXZlVXNlcih1c2VyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHRoaXMubWV0YUVuZHBvaW50ICsgJy9zYXZlJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlcilcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpZCA9IGF3YWl0IHJlcy50ZXh0KCk7XG5cbiAgICAgIHRoaXMuc2V0VmFsdWUoUkVBSU1fVUlELCBpZCk7XG4gICAgICB0aGlzLnNldEFzU3Vic2NyaWJlZCgpO1xuXG4gICAgICBpZiAodGhpcy5odG1sRE9NKSB7XG4gICAgICAgIHRoaXMuaGlkZU1vZGFsKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKCd1c2VyX3N1YnNjcmliZWQnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMubG9nKGVycik7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tJZlN0aWxsU3Vic2NyaWJlZCgpIHtcbiAgICBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdncmFudGVkJykgcmV0dXJuO1xuICAgIHRoaXMuc2V0QXNVbnN1YnNjcmliZWQoKTtcbiAgfVxuXG4gIGFzeW5jIHRyeVRvU3Vic2NyaWJlKG1ldGFkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgIHVzZXJWaXNpYmxlT25seTogdHJ1ZSxcbiAgICAgICAgYXBwbGljYXRpb25TZXJ2ZXJLZXk6IHVybEJhc2U2NFRvVWludDhBcnJheShtZXRhZGF0YS52YXBpZF9wdWJfa2V5KVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgdGhpcy5yZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbk9wdGlvbnMpO1xuXG4gICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBhY3Rpb246IFJFQUlNX1NBVkVfU1VCU0NSSVBUSU9OLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbjogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdWJzY3JpcHRpb24pKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vbkFsbG93KCk7XG5cbiAgICAgIGNvbnN0IHN0cmluZ2lmaWVkID0gSlNPTi5zdHJpbmdpZnkoc3Vic2NyaXB0aW9uKTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2Uoc3RyaW5naWZpZWQpO1xuICAgICAgY29uc3QgdXNlck9iamVjdCA9IHRoaXMucHJlcGFyZVJlcXVlc3QocGFyc2VkLCBtZXRhZGF0YSk7XG5cbiAgICAgIHRoaXMuc2F2ZVVzZXIodXNlck9iamVjdCk7XG5cbiAgICAgIGlmIChtZXRhZGF0YS53bikge1xuICAgICAgICB0aGlzLnNob3dXZWxjb21lTm90aWZpY2F0aW9uKG1ldGFkYXRhKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMubG9nKGVycik7XG4gICAgICB0aGlzLmxvZygndXNlcl9kZWNsaW5lZCcpO1xuICAgICAgdGhpcy5vbkJsb2NrKCk7XG4gICAgfVxuICB9XG5cbiAgc2hvd1dlbGNvbWVOb3RpZmljYXRpb24obWV0YWRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgd25Db250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoYXRvYihtZXRhZGF0YS53bl9jb250ZW50KSkpO1xuXG4gICAgICB0aGlzLnJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uKHduQ29udGVudC50aXRsZSwge1xuICAgICAgICBib2R5OiB3bkNvbnRlbnQuZGVzY3JpcHRpb24sXG4gICAgICAgIGRhdGE6IHsgdXJsOiB3bkNvbnRlbnQudXJsIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5sb2coZXJyKTtcbiAgICB9XG4gIH1cblxuICBwcmVsb2FkSW1hZ2UodXJsKSB7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBpbWcuc3JjID0gdXJsO1xuICB9XG5cbiAgc2hvd0N1c3RvbU1vZGFsKG1ldGFkYXRhLCBwcm9tcHRNZXRhKSB7XG4gICAgY29uc3QgY3NzID0gcmVuZGVyU3R5bGVzKHByb21wdE1ldGEpO1xuICAgIGNvbnN0IGh0bWwgPSByZW5kZXJVSShwcm9tcHRNZXRhKTtcblxuICAgIGlmIChwcm9tcHRNZXRhLmxvZ28pIHtcbiAgICAgIHRoaXMucHJlbG9hZEltYWdlKHByb21wdE1ldGEubG9nbyk7XG4gICAgfVxuXG4gICAgY29uc3QgUmVBaW1DU1MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgUmVBaW1DU1MuaW5uZXJIVE1MID0gY3NzO1xuXG4gICAgY29uc3QgUmVBaW1ET00gPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgY29uc3QgaHRtbERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgaHRtbERPTS5jbGFzc0xpc3QuYWRkKCdyZWFpbS13ZWItbW9kYWwnKTtcbiAgICBodG1sRE9NLmNsYXNzTGlzdC5hZGQoJ3JlYWltLXdlYi1tb2RhbC1jbG9zZWQnKTtcbiAgICBodG1sRE9NLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICB0aGlzLmh0bWxET00gPSBodG1sRE9NO1xuXG4gICAgY29uc3QgJGRlbnkgPSBodG1sRE9NLnF1ZXJ5U2VsZWN0b3IoJy5yZWFpbS1idXR0b24tZGVueScpO1xuXG4gICAgJGRlbnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlTW9kYWwoKTtcbiAgICAgIHRoaXMubG9nVmlzaXRzTnVtYmVyV2hlbkRlbmllZCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgJGFjY2VwdCA9IGh0bWxET00ucXVlcnlTZWxlY3RvcignLnJlYWltLWJ1dHRvbi1hY2NlcHQnKTtcblxuICAgICRhY2NlcHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlTW9kYWwoKTtcbiAgICAgIHRoaXMudHJ5VG9TdWJzY3JpYmUobWV0YWRhdGEpO1xuICAgIH0pO1xuXG4gICAgUmVBaW1ET00uYXBwZW5kQ2hpbGQoaHRtbERPTSk7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChSZUFpbUNTUyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChSZUFpbURPTSk7XG5cbiAgICBodG1sRE9NLmNsYXNzTGlzdC5yZW1vdmUoJ3JlYWltLXdlYi1tb2RhbC1jbG9zZWQnKTtcbiAgfVxuXG4gIGhpZGVNb2RhbCgpIHtcbiAgICB0aGlzLmh0bWxET00uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIGVub3VnaFZpc2l0c0FmdGVyQmxvY2sodmlzaXROdW1iZXIpIHtcbiAgICBjb25zdCB2aXNpdHNXaGVuRGVuaWVkID0gdGhpcy5nZXROdW1iZXJPZlZpc2l0c1doZW5EZW5pZWQoKTtcbiAgICBjb25zdCBwYWdldmlld3MgPSB0aGlzLmdldFZpc2l0cygpO1xuXG4gICAgaWYgKHZpc2l0c1doZW5EZW5pZWQgIT09IDApIHtcbiAgICAgIGlmIChwYWdldmlld3MgPj0gKHZpc2l0c1doZW5EZW5pZWQgKyB2aXNpdE51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHNob3dNb2RhbChtZXRhZGF0YSkge1xuICAgIGlmIChtZXRhZGF0YS5wcm9tcHRfdHlwZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgIGNvbnN0IHByb21wdE1ldGEgPSBKU09OLnBhcnNlKGF0b2IobWV0YWRhdGEucHJvbXB0KSk7XG5cbiAgICAgIGlmIChwcm9tcHRNZXRhLnNob3dJbW1lZGlhdGVseSkge1xuICAgICAgICB0aGlzLmxvZygnc2hvd19pbW1lZGlhdGVseV9jdXN0b21fcHJvbXB0Jyk7XG4gICAgICAgIHRoaXMuc2hvd0N1c3RvbU1vZGFsKG1ldGFkYXRhLCBwcm9tcHRNZXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHZpc2l0cyA9IHRoaXMuZ2V0VmlzaXRzKCk7XG5cbiAgICAgICAgaWYgKHZpc2l0cyA+PSBwcm9tcHRNZXRhLnNlc3Npb25OdW1iZXIgJiYgdGhpcy5lbm91Z2hWaXNpdHNBZnRlckJsb2NrKHByb21wdE1ldGEuYXNrQWdhaW5BZnRlcikpIHtcbiAgICAgICAgICB0aGlzLmxvZygnc2hvd190aW1lZF9jdXN0b21fcHJvbXB0Jyk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3dDdXN0b21Nb2RhbChtZXRhZGF0YSwgcHJvbXB0TWV0YSk7XG4gICAgICAgICAgfSwgcHJvbXB0TWV0YS5zaG93QWZ0ZXIgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZygnc2hvd19uYXRpdmVfcHJvbXB0Jyk7XG4gICAgICB0aGlzLnRyeVRvU3Vic2NyaWJlKG1ldGFkYXRhKTtcbiAgICB9XG4gIH1cblxuICBsb2dWaXNpdCgpIHtcbiAgICBjb25zdCB2aXNpdHMgPSB0aGlzLmdldFZhbHVlKFJFQUlNX1NES19WSVNJVFMpIHx8IDA7XG5cbiAgICB0aGlzLnNldFZhbHVlKFJFQUlNX1NES19WSVNJVFMsICt2aXNpdHMgKyAxKTtcbiAgfVxuXG4gIGxvZ1Zpc2l0c051bWJlcldoZW5EZW5pZWQoKSB7XG4gICAgY29uc3QgdmlzaXRzID0gdGhpcy5nZXRWYWx1ZShSRUFJTV9TREtfVklTSVRTKTtcblxuICAgIHRoaXMuc2V0VmFsdWUoUkVBSU1fREVOSUVEX09OX1ZJU0lUUywgdmlzaXRzKTtcbiAgfVxuXG4gIGdldE51bWJlck9mVmlzaXRzV2hlbkRlbmllZCgpIHtcbiAgICBjb25zdCB2aXNpdHMgPSBKU09OLnBhcnNlKHRoaXMuZ2V0VmFsdWUoUkVBSU1fREVOSUVEX09OX1ZJU0lUUykpO1xuXG4gICAgaWYgKHZpc2l0cykge1xuICAgICAgcmV0dXJuIHZpc2l0cztcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGdldFZpc2l0cygpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmdldFZhbHVlKFJFQUlNX1NES19WSVNJVFMpKSB8fCAwO1xuICB9XG5cbiAgc3RhdGljIHRyYWNrQ29udmVyc2lvbihwYXlvdXQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgIGNvbnN0IHRyYWNraW5nSUQgPSBwYXJhbXMuZ2V0KCdyX2NpZCcpO1xuXG4gICAgaWYgKHRyYWNraW5nSUQgJiYgcGF5b3V0ICYmIGlzVmFsaWRUb2tlbih0cmFja2luZ0lEKSkge1xuICAgICAgZmV0Y2goYCR7UkVBSU1fRVZFTlRTX0FQSX0vY29udj90PSR7dHJhY2tpbmdJRH0mcGF5b3V0PSR7cGF5b3V0fWApO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhZGRUYWdzKHRhZ3MpIHtcbiAgICBjb25zdCBpc1N1YnNjcmliZWQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFJFQUlNX1BVU0hfVVNFUl9TVUJTQ1JJQkVEKSk7XG4gICAgY29uc3Qgc2lkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShSRUFJTV9VSUQpKTtcblxuICAgIGlmICghaXNTdWJzY3JpYmVkIHx8ICFzaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoJ3RhZ3MnKSAmJiB0eXBlb2YgdGFncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRhZ3MgPSBbdGFnc107XG4gICAgfVxuXG4gICAgZmV0Y2goYCR7UkVBSU1fU1VCU19BUEl9L3RhZ3NgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc3Vic2NyaWJlcjogc2lkLFxuICAgICAgICB0YWdzXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaW5pdChzaXRlc1VJRCkge1xuICAgIHRoaXMubG9nVmlzaXQoKTtcbiAgICB0aGlzLnNpdGVzVUlEID0gc2l0ZXNVSUQ7XG5cbiAgICBpZiAoISgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSkgcmV0dXJuO1xuICAgIGlmICghKCdQdXNoTWFuYWdlcicgaW4gd2luZG93KSkgcmV0dXJuO1xuXG4gICAgdGhpcy5yZWdpc3RyYXRpb24gPSBhd2FpdCB0aGlzLnJlZ2lzdGVyU1coKTtcblxuICAgIGlmICh0aGlzLmNhblN1YnNjcmliZSgpKSB7XG4gICAgICB0aGlzLmxvZygndHJ5X3RvX3N1YnNjcmliZScpO1xuICAgICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCB0aGlzLmdldE1ldGFkYXRhKCk7XG5cbiAgICAgIHRoaXMuc2hvd01vZGFsKG1ldGFkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGVja0lmU3RpbGxTdWJzY3JpYmVkKCk7XG4gICAgfVxuICB9XG59XG5cbndpbmRvdy5SZUFpbVNESyA9IFJlQWltU0RLO1xuZXhwb3J0IGRlZmF1bHQgUmVBaW1TREs7XG4iLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxCYXNlNjRUb1VpbnQ4QXJyYXkoYmFzZTY0U3RyaW5nKSB7XG4gIGxldCBwYWRkaW5nID0gJz0nLnJlcGVhdCgoNCAtIGJhc2U2NFN0cmluZy5sZW5ndGggJSA0KSAlIDQpO1xuICBsZXQgYmFzZTY0ID0gKGJhc2U2NFN0cmluZyArIHBhZGRpbmcpXG4gICAgLnJlcGxhY2UoL1xcLS9nLCAnKycpXG4gICAgLnJlcGxhY2UoL18vZywgJy8nKTtcblxuICBsZXQgcmF3RGF0YSA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gIGxldCBvdXRwdXRBcnJheSA9IG5ldyBVaW50OEFycmF5KHJhd0RhdGEubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhd0RhdGEubGVuZ3RoOyArK2kpIHtcbiAgICBvdXRwdXRBcnJheVtpXSA9IHJhd0RhdGEuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gb3V0cHV0QXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVG9rZW4oc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGJ0b2EoYXRvYihzdHIpKSA9PT0gc3RyO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IChwcm9tcHRNZXRhKSA9PiB7XG4gIHJldHVybiBgXG4gICAgPGRpdiBjbGFzcz1cInJlYWltLXByb21wdC1jb250ZW50LXdyYXBwZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyZWFpbS1wcm9tcHQtbG9nby1icmFuZGluZ1wiPlxuICAgICAgICAke3Byb21wdE1ldGEubG9nbyA/IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVhaW0tcHJvbXB0LWxvZ29cIiBzdHlsZT1cIiR7cHJvbXB0TWV0YS5sb2dvID8gJ3Zpc2liaWxpdHk6IHZpc2libGUnIDogJ3Zpc2liaWxpdHk6IGhpZGRlbid9XCI+XG4gICAgICAgICAgICA8aW1nIHNyYz1cIiR7cHJvbXB0TWV0YS5sb2dvfVwiIGFsdD1cImxvZ29cIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYCA6ICcnfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJyZWFpbS1tb2RhbC1jb250ZW50XCI+XG4gICAgICAgIDxwPiR7cHJvbXB0TWV0YS5hY3Rpb25UZXh0fTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInJlYWltLXByb21wdC1idXR0b25zXCI+XG4gICAgICA8c21hbGw+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL3JlYWltLm1lXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIj5cbiAgICAgICAgICAke3Byb21wdE1ldGEucmVtb3ZlQnJhbmRpbmcgPyAnJyA6ICdQb3dlcmVkIGJ5IFJlQWltJ31cbiAgICAgICAgPC9hPlxuICAgICAgPC9zbWFsbD5cblxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJlYWltLWJ1dHRvbi1kZW55XCI+JHtwcm9tcHRNZXRhLmJsb2NrQnV0dG9ufTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVhaW0tYnV0dG9uLWFjY2VwdFwiPiR7cHJvbXB0TWV0YS5hbGxvd0J1dHRvbn08L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChwcm9tcHRNZXRhKSA9PiB7XG4gIHJldHVybiBgXG4gICAgLnJlYWltLXdlYi1tb2RhbCB7XG4gICAgICBhbGw6IGluaXRpYWw7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBtYXgtd2lkdGg6IDU0N3B4O1xuICAgICAgbWF4LWhlaWdodDogNTAwcHg7XG4gICAgICBwYWRkaW5nOiA0NXB4O1xuICAgICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICBmb250LXdlaWdodDogMTAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBiYWNrZ3JvdW5kOiAke3Byb21wdE1ldGEuYmFja2dyb3VuZENvbG9yfTtcbiAgICAgIGNvbG9yOiAke3Byb21wdE1ldGEuZm9udENvbG9yfTtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgYm94LXNoYWRvdzogMXB4IDJweCAyMHB4IHJnYmEoMCwwLDAsMC4xMiksIC0ycHggLTFweCAyMHB4IDBweCByZ2JhKDAsMCwwLDAuMjQpO1xuICAgICAgYm9yZGVyLXJhZGl1czogMHB4IDBweCA4cHggOHB4O1xuICAgICAgdG9wOiAwO1xuICAgICAgei1pbmRleDogOTk5OTk5O1xuICAgICAgZm9udC1mYW1pbHk6IFwiQXJpYWxcIiwgc2Fucy1zZXJpZjtcbiAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IC41cztcbiAgICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMSwgMC41LCAxKTtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsLWNsb3NlZCB7XG4gICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgKiB7XG4gICAgICBhbGw6IHVuc2V0O1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLXByb21wdC1jb250ZW50LXdyYXBwZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1wcm9tcHQtYnV0dG9ucyBzbWFsbCBhIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgY29sb3I6ICR7cHJvbXB0TWV0YS5mb250Q29sb3J9O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgb3BhY2l0eTogMC41O1xuICAgICAgY29sb3I6ICMwMjBFMTc7XG4gICAgICBmb250LXNpemU6IDlweDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIGN1cnNvcjogYnV0dG9uO1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLXByb21wdC1sb2dvIHtcbiAgICAgIHdpZHRoOiA4MHB4O1xuICAgICAgaGVpZ2h0OiA4MHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLXByb21wdC1sb2dvIGltZyB7XG4gICAgICBtYXgtd2lkdGg6IDgwcHg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1tb2RhbC1jb250ZW50IHtcbiAgICAgIHdpZHRoOiAzNjBweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLW1vZGFsLWNvbnRlbnQgcCB7XG4gICAgICBoZWlnaHQ6IDY1cHg7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBtYXJnaW4tdG9wOiAwO1xuICAgIH1cblxuICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLXByb21wdC1idXR0b25zIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgbWFyZ2luLXRvcDogMjVweDtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1wcm9tcHQtYnV0dG9ucyBidXR0b24ge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGhlaWdodDogNTJweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1idXR0b24tZGVueSB7XG4gICAgICBiYWNrZ3JvdW5kOiAke3Byb21wdE1ldGEuYmxvY2tCdXR0b25Db2xvcn07XG4gICAgICBjb2xvcjogJHtwcm9tcHRNZXRhLmJsb2NrRm9udENvbG9yfTtcbiAgICB9XG5cbiAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1idXR0b24tYWNjZXB0IHtcbiAgICAgIGJhY2tncm91bmQ6ICR7cHJvbXB0TWV0YS5hbGxvd0J1dHRvbkNvbG9yfTtcbiAgICAgIGNvbG9yOiAke3Byb21wdE1ldGEuYWxsb3dGb250Q29sb3J9O1xuICAgIH1cblxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAucmVhaW0td2ViLW1vZGFsIHtcbiAgICAgICAgbWF4LXdpZHRoOiAzNzVweDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgdG9wOiBhdXRvO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLW1vZGFsLWNvbnRlbnQgcCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIH1cblxuICAgICAgLnJlYWltLXdlYi1tb2RhbCAucmVhaW0tcHJvbXB0LWxvZ28ge1xuICAgICAgICB3aWR0aDogNjhweDtcbiAgICAgICAgaGVpZ2h0OiA2OHB4O1xuICAgICAgfVxuXG4gICAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1wcm9tcHQtYnV0dG9ucyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5yZWFpbS13ZWItbW9kYWwgLnJlYWltLXByb21wdC1idXR0b25zIGJ1dHRvbiB7XG4gICAgICAgIGhlaWdodDogNDBweDtcbiAgICAgICAgcGFkZGluZzogMTBweCAxNXB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBAbWVkaWEobWF4LXdpZHRoOiAzNTBweCkge1xuICAgICAgLnJlYWltLXdlYi1tb2RhbCAucmVhaW0tbW9kYWwtY29udGVudCBwIHtcbiAgICAgICAgaGVpZ2h0OiA5MHB4O1xuICAgICAgfVxuICAgIH1cblxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDMyNHB4KSB7XG4gICAgICAucmVhaW0td2ViLW1vZGFsIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1tb2RhbC1jb250ZW50IHAge1xuICAgICAgICBoZWlnaHQ6IDExMHB4O1xuICAgICAgfVxuXG4gICAgICAucmVhaW0td2ViLW1vZGFsIC5yZWFpbS1wcm9tcHQtYnV0dG9ucyBidXR0b24ge1xuICAgICAgICBwYWRkZGluZzogMTBweCAxMHB4O1xuICAgICAgICBmb250LXNpemU6IDEwcHg7XG4gICAgICB9XG4gICAgfVxuICBgO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=