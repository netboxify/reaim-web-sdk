!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("reaim-web-sdk",[],t):"object"==typeof exports?exports["reaim-web-sdk"]=t():e["reaim-web-sdk"]=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.REAIM_CLICK=t.REAIM_IMPRESSION=t.REAIM_STORAGE_NAME=t.REAIM_SUBS_API=t.REAIM_EVENTS_API=t.REAIM_API=t.REAIM_SAVE_SUBSCRIPTION=t.REAIM_RETRY_USER=t.REAIM_UID=t.REAIM_PUSH_USER_SUBSCRIBED=t.REAIM_DENIED_ON_VISITS=t.REAIM_SDK_VISITS=t.PRODUCTION=void 0;t.PRODUCTION=!0;t.REAIM_SDK_VISITS="reaim_sdk_visits";t.REAIM_DENIED_ON_VISITS="reaim_sdk_denied_on_visits";t.REAIM_PUSH_USER_SUBSCRIBED="reaim_sdk_push_user_subscribed";t.REAIM_UID="reaim_sdk_uid";t.REAIM_RETRY_USER="reaim_sdk_retry_user";t.REAIM_SAVE_SUBSCRIPTION="reaim_save_subscription";t.REAIM_API="https://api.reaim.me";t.REAIM_EVENTS_API="https://events.reaim.me";t.REAIM_SUBS_API="https://subs.reaim.me";t.REAIM_STORAGE_NAME="reaim_sdk_storage";t.REAIM_IMPRESSION="i";t.REAIM_CLICK="c"},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(e,t,n,r){var o=t&&t.prototype instanceof l?t:l,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return I()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=b(a,n);if(s){if(s===c)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===c)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var c={};function l(){}function d(){}function p(){}var f={};f[o]=function(){return this};var h=Object.getPrototypeOf,m=h&&h(h(S([])));m&&m!==t&&n.call(m,o)&&(f=m);var v=p.prototype=l.prototype=Object.create(f);function g(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function y(e,t){var r;this._invoke=function(o,i){function a(){return new t((function(r,a){!function r(o,i,a,s){var c=u(e[o],e,i);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==typeof d&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(d).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,s)}))}s(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function b(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function w(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function S(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:I}}function I(){return{value:void 0,done:!0}}return d.prototype=v.constructor=p,p.constructor=d,p[a]=d.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},g(y.prototype),y.prototype[i]=function(){return this},e.AsyncIterator=y,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new y(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},g(v),v[a]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,c):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),w(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;w(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=c(n(3)),o=n(4),i=n(0),a=c(n(5)),s=c(n(6)),u=c(n(1));function c(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function d(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){l(i,r,o,a,s,"next",e)}function s(e){l(i,r,o,a,s,"throw",e)}a(void 0)}))}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t&&"function"!=typeof t)throw new Error("Type of onAllow parameter should be function.");if(n&&"function"!=typeof n)throw new Error("Type of onBlock parameter should be function.");this.metaEndpoint=i.REAIM_SUBS_API,this.onAllow=t||o.noop,this.onBlock=n||o.noop}var t,n,c,l,f,h,m,v;return t=e,n=[{key:"log",value:function(e){console.log("ReAim SDK -",e)}},{key:"getMetadata",value:(v=d(u.default.mark((function e(){var t,n,o;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=Intl.DateTimeFormat().resolvedOptions().timeZone,e.next=4,(0,r.default)(this.metaEndpoint+"/info?tz="+t);case 4:return n=e.sent,e.next=7,n.json();case 7:return o=e.sent,e.abrupt("return",o);case 11:return e.prev=11,e.t0=e.catch(0),e.abrupt("return",null);case 14:case"end":return e.stop()}}),e,this,[[0,11]])}))),function(){return v.apply(this,arguments)})},{key:"canSubscribe",value:function(){return"default"===Notification.permission}},{key:"setAsSubscribed",value:function(){this.setValue(i.REAIM_PUSH_USER_SUBSCRIBED,!0)}},{key:"setAsUnsubscribed",value:function(){this.setValue(i.REAIM_PUSH_USER_SUBSCRIBED,!1)}},{key:"setValue",value:function(e,t){localStorage.setItem(e,t)}},{key:"removeValue",value:function(e){localStorage.removeItem(e)}},{key:"getValue",value:function(e){return localStorage.getItem(e)}},{key:"getSWPath",value:function(){return i.PRODUCTION?self.window&&self.window.REAIM_SW_PATH_GLOBAL||"/sw.js":"/reaim-sw.js"}},{key:"registerSW",value:function(){var e=this.getSWPath();return navigator.serviceWorker.register(e)}},{key:"prepareRequest",value:function(e,t){return{site_id:t.site_id,country_id:t.country_id,platform_id:t.platform_id,os_id:t.os_id,timezone_id:t.timezone_id,tz:(new Date).getTimezoneOffset()/60,browser_id:t.browser_id,user_id:t.user_id,endpoint:e.endpoint,auth:e.keys.auth,p256dh:e.keys.p256dh,page_url:window.location.pathname,sites_uid:this.sitesUID}}},{key:"subscriptionExisted",value:function(){return!!this.getValue(i.REAIM_UID)}},{key:"saveForRetry",value:function(e){this.setValue(i.REAIM_RETRY_USER,JSON.stringify(e))}},{key:"retrySave",value:(m=d(u.default.mark((function e(){var t,n;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this.getValue(i.REAIM_RETRY_USER),n=this.getValue(i.REAIM_UID),!t||n){e.next=12;break}return e.prev=3,e.next=6,this.saveUser(JSON.parse(t));case 6:this.removeValue(i.REAIM_RETRY_USER),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(3),this.log("retry_save_failed");case 12:case"end":return e.stop()}}),e,this,[[3,9]])}))),function(){return m.apply(this,arguments)})},{key:"saveUser",value:(h=d(u.default.mark((function e(t){var n,o;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!this.subscriptionExisted()){e.next=7;break}return e.next=4,(0,r.default)("".concat(this.metaEndpoint,"/refresh"),{method:"POST",body:JSON.stringify({id:this.getValue(i.REAIM_UID),endpoint:t.endpoint,auth:t.auth,p256dh:t.p256dh})});case 4:return e.sent&&this.log("user_updated"),e.abrupt("return");case 7:return e.next=9,(0,r.default)("".concat(this.metaEndpoint,"/save"),{method:"POST",body:JSON.stringify(t)});case 9:return n=e.sent,e.next=12,n.text();case 12:o=e.sent,this.setValue(i.REAIM_UID,o),this.setAsSubscribed(),this.htmlDOM&&this.hideModal(),this.log("user_subscribed"),e.next=23;break;case 19:e.prev=19,e.t0=e.catch(0),this.saveForRetry(t),this.log(e.t0);case 23:case"end":return e.stop()}}),e,this,[[0,19]])}))),function(e){return h.apply(this,arguments)})},{key:"checkIfStillSubscribed",value:function(){"granted"!==Notification.permission&&this.setAsUnsubscribed()}},{key:"tryToSubscribe",value:(f=d(u.default.mark((function e(t){var n,r,a,s,c;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n={userVisibleOnly:!0,applicationServerKey:(0,o.urlBase64ToUint8Array)(t.vapid_pub_key)},e.next=4,this.registration.pushManager.subscribe(n);case 4:return r=e.sent,navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({action:i.REAIM_SAVE_SUBSCRIPTION,subscription:JSON.parse(JSON.stringify(r))}),a=JSON.stringify(r),s=JSON.parse(a),c=this.prepareRequest(s,t),e.next=11,this.saveUser(c);case 11:this.onAllow(),t.wn&&this.showWelcomeNotification(t),e.next=20;break;case 15:e.prev=15,e.t0=e.catch(0),this.log(e.t0),this.log("user_declined"),this.onBlock();case 20:case"end":return e.stop()}}),e,this,[[0,15]])}))),function(e){return f.apply(this,arguments)})},{key:"showWelcomeNotification",value:function(e){try{var t=JSON.parse(decodeURIComponent(atob(e.wn_content)));this.registration.showNotification(t.title,{body:t.description,data:{url:t.url}})}catch(e){this.log(e)}}},{key:"preloadImage",value:function(e){(new Image).src=e}},{key:"showCustomModal",value:function(e,t){var n=this,r=(0,s.default)(t),o=(0,a.default)(t);t.logo&&this.preloadImage(t.logo);var i=document.createElement("style");i.innerHTML=r;var u=document.createDocumentFragment(),c=document.createElement("div");c.classList.add("reaim-web-modal"),c.classList.add("reaim-web-modal-closed"),c.innerHTML=o,this.htmlDOM=c,c.querySelector(".reaim-button-deny").addEventListener("click",(function(e){n.hideModal(),n.logVisitsNumberWhenDenied()})),c.querySelector(".reaim-button-accept").addEventListener("click",(function(t){n.hideModal(),n.tryToSubscribe(e)})),u.appendChild(c),document.head.appendChild(i),document.body.appendChild(u),c.classList.remove("reaim-web-modal-closed")}},{key:"hideModal",value:function(){this.htmlDOM.style.display="none"}},{key:"enoughVisitsAfterBlock",value:function(e){var t=this.getNumberOfVisitsWhenDenied(),n=this.getVisits();return 0===t||n>=t+e}},{key:"showModal",value:function(e){var t=this;if("custom"===e.prompt_type){var n=JSON.parse(atob(e.prompt));n.showImmediately?(this.log("show_immediately_custom_prompt"),this.showCustomModal(e,n)):this.getVisits()>=n.sessionNumber&&this.enoughVisitsAfterBlock(n.askAgainAfter)&&(this.log("show_timed_custom_prompt"),setTimeout((function(){t.showCustomModal(e,n)}),1e3*n.showAfter))}else this.log("show_native_prompt"),this.tryToSubscribe(e)}},{key:"logVisit",value:function(){var e=this.getValue(i.REAIM_SDK_VISITS)||0;this.setValue(i.REAIM_SDK_VISITS,+e+1)}},{key:"logVisitsNumberWhenDenied",value:function(){var e=this.getValue(i.REAIM_SDK_VISITS);this.setValue(i.REAIM_DENIED_ON_VISITS,e)}},{key:"getNumberOfVisitsWhenDenied",value:function(){var e=JSON.parse(this.getValue(i.REAIM_DENIED_ON_VISITS));return e||0}},{key:"getVisits",value:function(){return JSON.parse(this.getValue(i.REAIM_SDK_VISITS))||0}},{key:"init",value:(l=d(u.default.mark((function e(t){var n;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.logVisit(),this.sitesUID=t,"serviceWorker"in navigator){e.next=4;break}return e.abrupt("return");case 4:if("PushManager"in window){e.next=6;break}return e.abrupt("return");case 6:return e.next=8,this.registerSW();case 8:if(this.registration=e.sent,!this.canSubscribe()){e.next=17;break}return this.log("try_to_subscribe"),e.next=13,this.getMetadata();case 13:(n=e.sent)&&this.showModal(n),e.next=19;break;case 17:this.checkIfStillSubscribed(),this.retrySave();case 19:case"end":return e.stop()}}),e,this)}))),function(e){return l.apply(this,arguments)})}],c=[{key:"trackConversion",value:function(e){var t=new URLSearchParams(window.location.search).get("r_cid");t&&e&&(0,o.isValidToken)(t)&&(0,r.default)("".concat(i.REAIM_EVENTS_API,"/conv?t=").concat(t,"&payout=").concat(e))}},{key:"addToTrigger",value:function(e,t){var n="granted"===Notification.permission,o=localStorage.getItem(i.REAIM_UID);n&&o&&(0,r.default)("".concat(i.REAIM_API,"/api/v1/trigger/add/subscriber"),{headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify({trigger_id:e,subscriber_id:o,props:t})})}},{key:"removeFromTrigger",value:function(e){var t=localStorage.getItem(i.REAIM_UID);(0,r.default)("".concat(i.REAIM_API,"/api/v1/trigger/remove/subscriber"),{headers:{"Content-Type":"application/json"},method:"DELETE",body:JSON.stringify({trigger_id:e,subscriber_id:t})})}},{key:"addTags",value:function(e){var t="granted"===Notification.permission,n=JSON.parse(localStorage.getItem(i.REAIM_UID));t&&n&&(Array.isArray("tags")||"string"!=typeof e||(e=[e]),(0,r.default)("".concat(i.REAIM_SUBS_API,"/tags"),{method:"POST",body:JSON.stringify({subscriber:n,tags:e})}))}}],n&&p(t.prototype,n),c&&p(t,c),e}();window.ReAimSDK=f;var h=f;t.default=h,e.exports=t.default},function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return t=t||{},new Promise((function(n,r){var o=new XMLHttpRequest,i=[],a=[],s={},u=function(){return{ok:2==(o.status/100|0),statusText:o.statusText,status:o.status,url:o.responseURL,text:function(){return Promise.resolve(o.responseText)},json:function(){return Promise.resolve(JSON.parse(o.responseText))},blob:function(){return Promise.resolve(new Blob([o.response]))},clone:u,headers:{keys:function(){return i},entries:function(){return a},get:function(e){return s[e.toLowerCase()]},has:function(e){return e.toLowerCase()in s}}}};for(var c in o.open(t.method||"get",e,!0),o.onload=function(){o.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(e,t,n){i.push(t=t.toLowerCase()),a.push([t,n]),s[t]=s[t]?s[t]+","+n:n})),n(u())},o.onerror=r,o.withCredentials="include"==t.credentials,t.headers)o.setRequestHeader(c,t.headers[c]);o.send(t.body||null)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.noop=function(){},t.urlBase64ToUint8Array=function(e){for(var t="=".repeat((4-e.length%4)%4),n=(e+t).replace(/\-/g,"+").replace(/_/g,"/"),r=window.atob(n),o=new Uint8Array(r.length),i=0;i<r.length;++i)o[i]=r.charCodeAt(i);return o},t.isValidToken=function(e){try{return btoa(atob(e))===e}catch(e){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){return'\n    <div class="reaim-prompt-content-wrapper">\n      <div class="reaim-prompt-logo-branding">\n        '.concat(e.logo?'\n          <div class="reaim-prompt-logo" style="'.concat(e.logo?"visibility: visible":"visibility: hidden",'">\n            <img src="').concat(e.logo,'" alt="logo">\n          </div>\n        '):"",'\n      </div>\n\n      <div class="reaim-modal-content">\n        <p>').concat(e.actionText,'</p>\n      </div>\n    </div>\n\n    <div class="reaim-prompt-buttons">\n      <small>\n        <a href="https://reaim.me" target="_blank" rel="noopener">\n          ').concat(e.removeBranding?"":"Powered by ReAim",'\n        </a>\n      </small>\n\n      <div>\n        <button class="reaim-button-deny">').concat(e.blockButton,'</button>\n        <button class="reaim-button-accept">').concat(e.allowButton,"</button>\n      </div>\n    </div>\n  ")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){return"\n    .reaim-web-modal {\n      all: initial;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: column;\n      position: fixed;\n      max-width: 547px;\n      max-height: 500px;\n      padding: 45px;\n      padding-bottom: 30px;\n      font-size: 14px;\n      font-weight: 100;\n      width: 100%;\n      background: ".concat(e.backgroundColor,";\n      color: ").concat(e.fontColor,';\n      margin: 0 auto;\n      left: 0;\n      right: 0;\n      box-shadow: 1px 2px 20px rgba(0,0,0,0.12), -2px -1px 20px 0px rgba(0,0,0,0.24);\n      border-radius: 0px 0px 8px 8px;\n      top: 0;\n      z-index: 999999;\n      font-family: "Arial", sans-serif;\n      transition-property: all;\n      transition-duration: .5s;\n      transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n    }\n\n    .reaim-web-modal-closed {\n      max-height: 0;\n    }\n\n    .reaim-web-modal * {\n      all: unset;\n    }\n\n    .reaim-web-modal .reaim-prompt-content-wrapper {\n      display: flex;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons small a {\n      display: block;\n      color: ').concat(e.fontColor,";\n      position: relative;\n      text-decoration: none;\n      opacity: 0.5;\n      color: #020E17;\n      font-size: 9px;\n      text-decoration: none;\n      cursor: button;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo {\n      width: 80px;\n      height: 80px;\n      margin-right: 30px;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo img {\n      max-width: 80px;\n      width: 100%;\n    }\n\n    .reaim-web-modal .reaim-modal-content {\n      width: 360px;\n      position: relative;\n      margin-left: 20px;\n    }\n\n    .reaim-web-modal .reaim-modal-content p {\n      height: 65px;\n      font-size: 16px;\n      margin-top: 0;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-top: 25px;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons button {\n      box-sizing: border-box;\n      height: 52px;\n      border-radius: 8px;\n      cursor: pointer;\n      margin-left: 10px;\n      padding: 10px 20px;\n      border: none;\n      outline: none;\n      font-size: 14px;\n    }\n\n    .reaim-web-modal .reaim-button-deny {\n      background: ").concat(e.blockButtonColor,";\n      color: ").concat(e.blockFontColor,";\n    }\n\n    .reaim-web-modal .reaim-button-accept {\n      background: ").concat(e.allowButtonColor,";\n      color: ").concat(e.allowFontColor,";\n    }\n\n    @media(max-width: 768px) {\n      .reaim-web-modal {\n        max-width: 375px;\n        font-size: 12px;\n        position: fixed;\n        bottom: 0;\n        top: auto;\n        left: 0;\n        right: 0;\n        border-radius: 8px 8px 0px 0px;\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        font-size: 14px;\n      }\n\n      .reaim-web-modal .reaim-prompt-logo {\n        width: 68px;\n        height: 68px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons {\n        display: flex;\n        margin-top: 10px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        height: 40px;\n        padding: 10px 15px;\n        font-size: 12px;\n      }\n    }\n\n\n    @media(max-width: 350px) {\n      .reaim-web-modal .reaim-modal-content p {\n        height: 90px;\n      }\n    }\n\n    @media(max-width: 324px) {\n      .reaim-web-modal {\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        height: 110px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        paddding: 10px 10px;\n        font-size: 10px;\n      }\n    }\n  ")},e.exports=t.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,