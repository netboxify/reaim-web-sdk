!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("reaim-web-sdk",[],e):"object"==typeof exports?exports["reaim-web-sdk"]=e():t["reaim-web-sdk"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.REAIM_CLICK=e.REAIM_IMPRESSION=e.REAIM_STORAGE_NAME=e.REAIM_SUBS_API=e.REAIM_EVENTS_API=e.REAIM_SAVE_SUBSCRIPTION=e.REAIM_UID=e.REAIM_PUSH_USER_SUBSCRIBED=e.REAIM_DENIED_ON_VISITS=e.REAIM_SDK_VISITS=e.REAIM_SW_PATH=void 0;var r=self.window&&self.window.REAIM_SW_PATH_GLOBAL||"/reaim-sw.js";e.REAIM_SW_PATH=r;e.REAIM_SDK_VISITS="reaim_sdk_visits";e.REAIM_DENIED_ON_VISITS="reaim_sdk_denied_on_visits";e.REAIM_PUSH_USER_SUBSCRIBED="reaim_sdk_push_user_subscribed";e.REAIM_UID="reaim_sdk_uid";e.REAIM_SAVE_SUBSCRIPTION="reaim_save_subscription";e.REAIM_EVENTS_API="https://events.reaim.me";e.REAIM_SUBS_API="https://subs.reaim.me";e.REAIM_STORAGE_NAME="reaim_sdk_storage";e.REAIM_IMPRESSION="i";e.REAIM_CLICK="c"},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(t,e,n,r){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return E()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=b(a,n);if(s){if(s===c)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===c)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var c={};function l(){}function d(){}function p(){}var f={};f[o]=function(){return this};var h=Object.getPrototypeOf,m=h&&h(h(S([])));m&&m!==e&&n.call(m,o)&&(f=m);var v=p.prototype=l.prototype=Object.create(f);function g(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function y(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var c=u(t[o],t,i);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==typeof d&&n.call(d,"__await")?e.resolve(d.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(d).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=u(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,c;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function w(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return d.prototype=v.constructor=p,p.constructor=d,p[a]=d.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},g(y.prototype),y.prototype[i]=function(){return this},t.AsyncIterator=y,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new y(s(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(v),v[a]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=S,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,c):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),w(n),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;w(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n(3),o=n(0),i=u(n(4)),a=u(n(5)),s=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function c(t,e,n,r,o,i,a){try{var s=t[i](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){c(i,r,o,a,s,"next",t)}function s(t){c(i,r,o,a,s,"throw",t)}a(void 0)}))}}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=function(){function t(e,n){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e&&"function"!=typeof e)throw new Error("Type of onAllow parameter should be function.");if(n&&"function"!=typeof n)throw new Error("Type of onBlock parameter should be function.");this.metaEndpoint=o.REAIM_SUBS_API,this.onAllow=e||r.noop,this.onBlock=n||r.noop}var e,n,u,c,p,f,h;return e=t,n=[{key:"log",value:function(t){console.log("ReAim SDK -",t)}},{key:"getMetadata",value:(h=l(s.default.mark((function t(){var e,n,r;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Intl.DateTimeFormat().resolvedOptions().timeZone,t.next=3,fetch(this.metaEndpoint+"/info?tz="+e);case 3:return n=t.sent,t.next=6,n.json();case 6:return r=t.sent,t.abrupt("return",r);case 8:case"end":return t.stop()}}),t,this)}))),function(){return h.apply(this,arguments)})},{key:"canSubscribe",value:function(){return"default"===Notification.permission}},{key:"setAsSubscribed",value:function(){this.setValue(o.REAIM_PUSH_USER_SUBSCRIBED,!0)}},{key:"setAsUnsubscribed",value:function(){this.setValue(o.REAIM_PUSH_USER_SUBSCRIBED,!1)}},{key:"setValue",value:function(t,e){localStorage.setItem(t,e)}},{key:"getValue",value:function(t){return localStorage.getItem(t)}},{key:"registerSW",value:function(){return navigator.serviceWorker.register(o.REAIM_SW_PATH)}},{key:"prepareRequest",value:function(t,e){return{site_id:e.site_id,country_id:e.country_id,platform_id:e.platform_id,os_id:e.os_id,timezone_id:e.timezone_id,tz:(new Date).getTimezoneOffset()/60,browser_id:e.browser_id,user_id:e.user_id,endpoint:t.endpoint,auth:t.keys.auth,p256dh:t.keys.p256dh,page_url:window.location.pathname,sites_uid:this.sitesUID}}},{key:"saveUser",value:(f=l(s.default.mark((function t(e){var n,r;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(this.metaEndpoint+"/save",{method:"POST",body:JSON.stringify(e)});case 3:return n=t.sent,t.next=6,n.text();case 6:r=t.sent,this.setValue(o.REAIM_UID,r),this.setAsSubscribed(),this.htmlDOM&&this.hideModal(),this.log("user_subscribed"),t.next=16;break;case 13:t.prev=13,t.t0=t.catch(0),this.log(t.t0);case 16:case"end":return t.stop()}}),t,this,[[0,13]])}))),function(t){return f.apply(this,arguments)})},{key:"checkIfStillSubscribed",value:function(){"granted"!==Notification.permission&&this.setAsUnsubscribed()}},{key:"tryToSubscribe",value:(p=l(s.default.mark((function t(e){var n,i,a,u,c;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n={userVisibleOnly:!0,applicationServerKey:(0,r.urlBase64ToUint8Array)(e.vapid_pub_key)},t.next=4,this.registration.pushManager.subscribe(n);case 4:i=t.sent,navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({action:o.REAIM_SAVE_SUBSCRIPTION,subscription:JSON.parse(JSON.stringify(i))}),this.onAllow(),a=JSON.stringify(i),u=JSON.parse(a),c=this.prepareRequest(u,e),this.saveUser(c),e.wn&&this.showWelcomeNotification(e),t.next=19;break;case 14:t.prev=14,t.t0=t.catch(0),this.log(t.t0),this.log("user_declined"),this.onBlock();case 19:case"end":return t.stop()}}),t,this,[[0,14]])}))),function(t){return p.apply(this,arguments)})},{key:"showWelcomeNotification",value:function(t){try{var e=JSON.parse(atob(t.wn_content));this.registration.showNotification(e.title,{body:e.description,data:{url:e.url}})}catch(t){this.log(t)}}},{key:"showCustomModal",value:function(t,e){var n=this,r=(0,a.default)(e),o=(0,i.default)(e),s=document.createElement("style");s.innerHTML=r;var u=document.createDocumentFragment(),c=document.createElement("div");c.classList.add("reaim-web-modal"),c.innerHTML=o,this.htmlDOM=c,c.querySelector(".reaim-button-deny").addEventListener("click",(function(t){n.hideModal(),n.logVisitsNumberWhenDenied()})),c.querySelector(".reaim-button-accept").addEventListener("click",(function(e){n.hideModal(),n.tryToSubscribe(t)})),u.appendChild(c),document.head.appendChild(s),document.body.appendChild(u)}},{key:"hideModal",value:function(){this.htmlDOM.style.display="none"}},{key:"enoughVisitsAfterBlock",value:function(t){var e=this.getNumberOfVisitsWhenDenied(),n=this.getVisits();return 0===e||n>=e+t}},{key:"showModal",value:function(t){var e=this;if("custom"===t.prompt_type){var n=JSON.parse(atob(t.prompt));n.showImmediately?(this.log("show_immediately_custom_prompt"),this.showCustomModal(t,n)):this.getVisits()>=n.sessionNumber&&this.enoughVisitsAfterBlock(n.askAgainAfter)&&(this.log("show_timed_custom_prompt"),setTimeout((function(){e.showCustomModal(t,n)}),1e3*n.showAfter))}else this.log("show_native_prompt"),this.tryToSubscribe(t)}},{key:"logVisit",value:function(){var t=this.getValue(o.REAIM_SDK_VISITS)||0;this.setValue(o.REAIM_SDK_VISITS,+t+1)}},{key:"logVisitsNumberWhenDenied",value:function(){var t=this.getValue(o.REAIM_SDK_VISITS);this.setValue(o.REAIM_DENIED_ON_VISITS,t)}},{key:"getNumberOfVisitsWhenDenied",value:function(){var t=JSON.parse(this.getValue(o.REAIM_DENIED_ON_VISITS));return t||0}},{key:"getVisits",value:function(){return JSON.parse(this.getValue(o.REAIM_SDK_VISITS))||0}},{key:"init",value:(c=l(s.default.mark((function t(e){var n;return s.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.logVisit(),this.sitesUID=e,"serviceWorker"in navigator){t.next=4;break}return t.abrupt("return");case 4:if("PushManager"in window){t.next=6;break}return t.abrupt("return");case 6:return t.next=8,this.registerSW();case 8:if(this.registration=t.sent,!this.canSubscribe()){t.next=17;break}return this.log("try_to_subscribe"),t.next=13,this.getMetadata();case 13:n=t.sent,this.showModal(n),t.next=18;break;case 17:this.checkIfStillSubscribed();case 18:case"end":return t.stop()}}),t,this)}))),function(t){return c.apply(this,arguments)})}],u=[{key:"trackConversion",value:function(t){var e=new URLSearchParams(window.location.search).get("r_cid");e&&t&&(0,r.isValidToken)(e)&&fetch("".concat(o.REAIM_EVENTS_API,"/conv?t=").concat(e,"&payout=").concat(t))}},{key:"addTags",value:function(t){var e=JSON.parse(localStorage.getItem(o.REAIM_PUSH_USER_SUBSCRIBED)),n=JSON.parse(localStorage.getItem(o.REAIM_UID));e&&n&&(Array.isArray("tags")||"string"!=typeof t||(t=[t]),fetch("".concat(o.REAIM_SUBS_API,"/tags"),{method:"POST",body:JSON.stringify({subscriber:n,tags:t})}))}}],n&&d(e.prototype,n),u&&d(e,u),t}();window.ReAimSDK=p;var f=p;e.default=f,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.noop=function(){},e.urlBase64ToUint8Array=function(t){for(var e="=".repeat((4-t.length%4)%4),n=(t+e).replace(/\-/g,"+").replace(/_/g,"/"),r=window.atob(n),o=new Uint8Array(r.length),i=0;i<r.length;++i)o[i]=r.charCodeAt(i);return o},e.isValidToken=function(t){try{return btoa(atob(t))===t}catch(t){return!1}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){return'\n    <div class="reaim-prompt-content-wrapper">\n      <div class="reaim-prompt-logo-branding">\n        <div class="reaim-prompt-logo">\n          <img src="'.concat(t.logo,'" alt="logo">\n        </div>\n\n        ').concat(t.removeBranding?"":'<small>\n          <a href="https://reaim.me" target="_blank" rel="noopener">Powered by ReAim</a>\n        </small>','\n      </div>\n\n      <div class="reaim-modal-content">\n        <p>').concat(t.actionText,'</p>\n      </div>\n    </div>\n\n    <div class="reaim-prompt-buttons">\n      <button class="reaim-button-deny">').concat(t.blockButton,'</button>\n      <button class="reaim-button-accept">').concat(t.allowButton,"</button>\n    </div>\n  ")},t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){return"\n    .reaim-web-modal {\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: column;\n      position: fixed;\n      max-width: 547px;\n      padding: 45px;\n      padding-bottom: 30px;\n      font-size: 14px;\n      font-weight: 100;\n      width: 100%;\n      background: ".concat(t.backgroundColor,";\n      color: ").concat(t.fontColor,';\n      margin: 0 auto;\n      left: 0;\n      right: 0;\n      box-shadow: 1px 2px 20px rgba(0,0,0,0.12), -2px -1px 20px 0px rgba(0,0,0,0.24);\n      border-radius: 0px 0px 8px 8px;\n      top: 0;\n      z-index: 999999;\n      font-family: "Arial", sans-serif;\n    }\n\n    .reaim-web-modal .reaim-prompt-content-wrapper {\n      display: flex;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo-branding small a {\n      position: relative;\n      top: 15px;\n      text-decoration: none;\n      opacity: 0.5;\n      color: #020E17;\n      font-size: 10px;\n      text-decoration: none;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo {\n      width: 80px;\n      height: 80px;\n      margin-right: 30px;\n    }\n\n    .reaim-web-modal .reaim-prompt-logo img {\n      max-width: 80px;\n      width: 100%;\n    }\n\n    .reaim-web-modal .reaim-modal-content {\n      width: 360px;\n      position: relative;\n    }\n\n    .reaim-web-modal .reaim-modal-content p {\n      height: 65px;\n      font-size: 16px;\n      margin-top: 0;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons {\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    .reaim-web-modal .reaim-prompt-buttons button {\n      height: 52px;\n      border-radius: 8px;\n      cursor: pointer;\n      margin-left: 10px;\n      padding: 10px 20px;\n      border: none;\n      outline: none;\n      font-size: 14px;\n    }\n\n    .reaim-web-modal .reaim-button-deny {\n      background: ').concat(t.blockButtonColor,";\n      color: ").concat(t.blockFontColor,";\n    }\n\n    .reaim-web-modal .reaim-button-accept {\n      background: ").concat(t.allowButtonColor,";\n      color: ").concat(t.allowFontColor,";\n    }\n\n    @media(max-width: 768px) {\n      .reaim-web-modal {\n        max-width: 375px;\n        font-size: 12px;\n        position: fixed;\n        bottom: 0;\n        top: auto;\n        left: 0;\n        right: 0;\n        border-radius: 8px 8px 0px 0px;\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        font-size: 14px;\n      }\n\n      .reaim-web-modal .reaim-prompt-logo {\n        width: 68px;\n        height: 68px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons {\n        display: flex;\n        margin-top: 10px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        height: 40px;\n        padding: 10px 15px;\n        font-size: 12px;\n      }\n    }\n\n\n    @media(max-width: 350px) {\n      .reaim-web-modal .reaim-modal-content p {\n        height: 90px;\n      }\n    }\n\n    @media(max-width: 324px) {\n      .reaim-web-modal {\n        height: 250px;\n        padding-left: 20px;\n        padding-right: 20px;\n      }\n\n      .reaim-web-modal .reaim-modal-content p {\n        height: 110px;\n      }\n\n      .reaim-web-modal .reaim-prompt-buttons button {\n        paddding: 10px 10px;\n        font-size: 10px;\n      }\n    }\n  ")},t.exports=e.default}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,