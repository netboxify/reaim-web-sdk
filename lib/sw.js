!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("reaim-web-sdk",[],e):"object"==typeof exports?exports["reaim-web-sdk"]=e():t["reaim-web-sdk"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.REAIM_CLICK=e.REAIM_IMPRESSION=e.REAIM_STORAGE_NAME=e.REAIM_SUBS_API=e.REAIM_EVENTS_API=e.REAIM_SAVE_SUBSCRIPTION=e.REAIM_UID=e.REAIM_PUSH_USER_SUBSCRIBED=e.REAIM_DENIED_ON_VISITS=e.REAIM_SDK_VISITS=e.REAIM_SW_PATH=void 0;window.ENV="production";var r=self.window&&self.window.REAIM_SW_PATH_GLOBAL||"/sw.js";e.REAIM_SW_PATH=r;e.REAIM_SDK_VISITS="reaim_sdk_visits";e.REAIM_DENIED_ON_VISITS="reaim_sdk_denied_on_visits";e.REAIM_PUSH_USER_SUBSCRIBED="reaim_sdk_push_user_subscribed";e.REAIM_UID="reaim_sdk_uid";e.REAIM_SAVE_SUBSCRIPTION="reaim_save_subscription";e.REAIM_EVENTS_API="https://events.reaim.me";e.REAIM_SUBS_API="https://subs.reaim.me";e.REAIM_STORAGE_NAME="reaim_sdk_storage";e.REAIM_IMPRESSION="i";e.REAIM_CLICK="c"},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,e,n,r){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new w(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return I()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=m(a,n);if(c){if(c===s)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===s)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var s={};function l(){}function f(){}function h(){}var d={};d[o]=function(){return this};var p=Object.getPrototypeOf,v=p&&p(p(b([])));v&&v!==e&&n.call(v,o)&&(d=v);var y=h.prototype=l.prototype=Object.create(d);function _(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function g(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,c){var s=u(t[o],t,i);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function m(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,m(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=u(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,s;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function w(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function b(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:I}}function I(){return{value:void 0,done:!0}}return f.prototype=y.constructor=h,h.constructor=f,h[a]=f.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},_(g.prototype),g.prototype[i]=function(){return this},t.AsyncIterator=g,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new g(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(y),y[a]="Generator",y[o]=function(){return this},y.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=b,w.prototype={constructor:w,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:b(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,,function(t,e,n){"use strict";var r=a(n(1)),o=a(n(7)),i=n(0);function a(t){return t&&t.__esModule?t:{default:t}}function c(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function u(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){c(i,r,o,a,u,"next",t)}function u(t){c(i,r,o,a,u,"throw",t)}a(void 0)}))}}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=new o.default(i.REAIM_STORAGE_NAME,1),f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o,a,c,f,h,d,p,v;return e=t,n=null,o=[{key:"log",value:(v=u(r.default.mark((function t(e,n,o){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e&&n&&o)){t.next=10;break}t.t0=o,t.next="cmp"===t.t0?4:"trg"===t.t0?6:"feed"===t.t0?8:10;break;case 4:return fetch("".concat(i.REAIM_EVENTS_API,"/log?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 6:return fetch("".concat(i.REAIM_EVENTS_API,"/trigger?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 8:return fetch("".concat(i.REAIM_EVENTS_API,"/feed?k=").concat(e,"&").concat(atob(n))),t.abrupt("break",10);case 10:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return v.apply(this,arguments)})},{key:"updateSubscription",value:(p=u(r.default.mark((function t(e){var n,o;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:try{(n=localStorage.getItem(i.REAIM_UID))&&(o=new Request(i.REAIM_SUBS_API+"/refresh",{method:"POST",body:JSON.stringify({id:n,endpoint:e.endpoint,auth:e.keys.auth,p256dh:e.keys.p256dh})}),self.fetch(o))}catch(t){console.log(t)}case 1:case"end":return t.stop()}}),t,this)}))),function(t){return p.apply(this,arguments)})},{key:"handleInstall",value:function(t){self.skipWaiting()}},{key:"handleActivate",value:function(t){t.waitUntil(self.clients.claim())}},{key:"handlePushEvent",value:(d=u(r.default.mark((function e(n){var o,a,c;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:o=n.data.json(),a=o.c.t,c={body:o.c.d,icon:o.c.i,image:o.c.m,badge:o.c.b,actions:o.c.a,data:{tracking:o.t,url:o.c.u,actions:o.c.a,variant:o.v}},t.log(i.REAIM_IMPRESSION,o.t,o.v),n.waitUntil(self.registration.showNotification(a,c));case 5:case"end":return e.stop()}}),e,this)}))),function(t){return d.apply(this,arguments)})},{key:"handleClickEvent",value:(h=u(r.default.mark((function e(n){var o,a,c,u;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.notification.close(),o=n.notification.data.tracking,a=n.notification.data.variant||"cmp","action-1"===n.action?(c=n.notification.data.actions[0].url,t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(c))):"action-2"===n.action?(u=n.notification.data.actions[1].url,t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(u))):n.notification.data.url&&(t.log(i.REAIM_CLICK,o,a),n.waitUntil(self.clients.openWindow(n.notification.data.url)));case 4:case"end":return e.stop()}}),e,this)}))),function(t){return h.apply(this,arguments)})},{key:"handleUpdateSubscription",value:(f=u(r.default.mark((function e(n){var o,i;return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,self.registration.pushManager.getSubscription();case 2:return o=e.sent,e.t0=JSON,e.next=6,l.getItem("subscription");case 6:e.t1=e.sent,(i=e.t0.parse.call(e.t0,e.t1))||(t.saveLocalSubscription(o),t.updateSubscription(o)),o&&i&&o.endpoint!==i.endpoint&&(t.saveLocalSubscription(o),t.updateSubscription(o));case 10:case"end":return e.stop()}}),e,this)}))),function(t){return f.apply(this,arguments)})},{key:"saveLocalSubscription",value:(c=u(r.default.mark((function t(e){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l.setItem("subscription",e);case 2:case"end":return t.stop()}}),t,this)}))),function(t){return c.apply(this,arguments)})},{key:"handleMessage",value:(a=u(r.default.mark((function e(n){return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n.data.action===i.REAIM_SAVE_SUBSCRIPTION&&n.waitUntil(t.saveLocalSubscription(n.data.subscription));case 1:case"end":return e.stop()}}),e,this)}))),function(t){return a.apply(this,arguments)})}],n&&s(e.prototype,n),o&&s(e,o),t}();self.addEventListener("install",f.handleInstall),self.addEventListener("activate",f.handleActivate),self.addEventListener("push",f.handlePushEvent),self.addEventListener("notificationclick",f.handleClickEvent),self.addEventListener("pushsubscriptionchange",f.handleUpdateSubscription),self.addEventListener("message",f.handleMessage)},function(t,e,n){"use strict";var r=n(8);t.exports=r.ServiceWorkerStorage},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.promisify=i;var o=e.IDB_TRANSACTION_MODE={readonly:"readonly",readwrite:"readwrite",versionchange:"versionchange"};function i(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=n}))}e.ServiceWorkerStorage=function(){function t(e,n){var r=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw new TypeError("db_name must be string.");if("number"!=typeof n)throw new TypeError("version must be number.");var o=n;this.DB_NAME=e,this.STORE_NAME="sw_storage";var a=self.indexedDB.open(this.DB_NAME,o);a.onupgradeneeded=function(t){var e=t.target.result;e.objectStoreNames&&e.objectStoreNames.contains(r.STORE_NAME)||e.createObjectStore(r.STORE_NAME)},this.__db=i(a)}return r(t,[{key:"_accessAsyncStore",value:function(t){var e=this;return this.__db.then((function(n){return n.transaction(e.STORE_NAME,t).objectStore(e.STORE_NAME)}))}},{key:"length",value:function(){return this._accessAsyncStore(o.readonly).then((function(t){return i(t.getAllKeys())})).then((function(t){return t.length}))}},{key:"key",value:function(t){return arguments.length?("number"!=typeof t&&(t=0),this._accessAsyncStore(o.readonly).then((function(t){return i(t.getAllKeys())})).then((function(e){return e[t]||null}))):Promise.reject(new TypeError('Failed to execute "key" on "Storage"'))}},{key:"getItem",value:function(t){return this._accessAsyncStore(o.readonly).then((function(e){return e.get(t)})).then(i)}},{key:"setItem",value:function(t,e){return this._accessAsyncStore(o.readwrite).then((function(n){return n.put(e,t)})).then(i)}},{key:"removeItem",value:function(t){return this._accessAsyncStore(o.readwrite).then((function(e){return e.delete(t)})).then(i)}},{key:"clear",value:function(){return this.__db.then((function(t){for(var e=t.transaction(t.objectStoreNames,o.readwrite),n=[],r=0,a=t.objectStoreNames.length;r<a;r++){var c=t.objectStoreNames[r];n.push(i(e.objectStore(c).clear()))}return Promise.all(n)}))}}]),t}()}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFpbS13ZWItc2RrL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9yZWFpbS13ZWItc2RrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9zcmMvc3cuanMiLCJ3ZWJwYWNrOi8vcmVhaW0td2ViLXNkay8uL25vZGVfbW9kdWxlcy9zZXJ2aWNld29ya2VyLXN0b3JhZ2UvbGliL2luZGV4LmpzIiwid2VicGFjazovL3JlYWltLXdlYi1zZGsvLi9ub2RlX21vZHVsZXMvc2VydmljZXdvcmtlci1zdG9yYWdlL2xpYi9TZXJ2aWNlV29ya2VyU3RvcmFnZS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ3aW5kb3ciLCJFTlYiLCJwcm9jZXNzIiwiUkVBSU1fU1dfUEFUSCIsIlJFQUlNX1NXX1BBVEhfR0xPQkFMIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwibWV0aG9kIiwiYXJnIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJkb25lIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwib2JqIiwiZXJyIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXNvbHZlIiwicmVqZWN0IiwiaW52b2tlIiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImNvbnN0cnVjdG9yIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsInRvU3RyaW5nIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJGdW5jdGlvbiIsInN0b3JhZ2UiLCJSZUFpbVNXIiwia2luZCIsInRyYWNraW5nIiwidmFyaWFudCIsImZldGNoIiwiYXRvYiIsInN1YnNjcmlwdGlvbiIsImlkIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlcSIsIlJlcXVlc3QiLCJSRUFJTV9TVUJTX0FQSSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5kcG9pbnQiLCJhdXRoIiwicDI1NmRoIiwiY29uc29sZSIsImxvZyIsImV2ZW50Iiwic2tpcFdhaXRpbmciLCJ3YWl0VW50aWwiLCJjbGllbnRzIiwiY2xhaW0iLCJwYXlsb2FkIiwiZGF0YSIsImpzb24iLCJ0aXRsZSIsIm9wdGlvbnMiLCJpY29uIiwiaW1hZ2UiLCJiYWRnZSIsImIiLCJhY3Rpb25zIiwiYSIsInVybCIsInUiLCJ2IiwicmVnaXN0cmF0aW9uIiwic2hvd05vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbiIsImNsb3NlIiwiYWN0aW9uIiwib3BlbldpbmRvdyIsInB1c2hNYW5hZ2VyIiwiZ2V0U3Vic2NyaXB0aW9uIiwibmV3U3Vic2NyaXB0aW9uIiwib2xkU3Vic2NyaXB0aW9uIiwicGFyc2UiLCJzYXZlTG9jYWxTdWJzY3JpcHRpb24iLCJ1cGRhdGVTdWJzY3JpcHRpb24iLCJzZXRJdGVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUluc3RhbGwiLCJoYW5kbGVBY3RpdmF0ZSIsImhhbmRsZVB1c2hFdmVudCIsImhhbmRsZUNsaWNrRXZlbnQiLCJoYW5kbGVVcGRhdGVTdWJzY3JpcHRpb24iLCJoYW5kbGVNZXNzYWdlIiwiX1NlcnZpY2VXb3JrZXJTdG9yYWdlIiwiU2VydmljZVdvcmtlclN0b3JhZ2UiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb21pc2lmeSIsIklEQl9UUkFOU0FDVElPTl9NT0RFIiwicmVhZG9ubHkiLCJyZWFkd3JpdGUiLCJ2ZXJzaW9uY2hhbmdlIiwiaWRiUmVxdWVzdCIsIm9uc3VjY2VzcyIsIm9uZXJyb3IiLCJkYl9uYW1lIiwidmVyc2lvbiIsIl90aGlzIiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJWRVJTSU9OIiwiREJfTkFNRSIsIlNUT1JFX05BTUUiLCJkYiIsImluZGV4ZWREQiIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJfZGIiLCJvYmplY3RTdG9yZU5hbWVzIiwiY29udGFpbnMiLCJjcmVhdGVPYmplY3RTdG9yZSIsIl9fZGIiLCJfdGhpczIiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiX2FjY2Vzc0FzeW5jU3RvcmUiLCJzdG9yZSIsImdldEFsbEtleXMiLCJpZHgiLCJhcmd1bWVudHMiLCJw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QUN0QnRLLE1BQUssU0FBVXNDLEdBQ2hCLE9BQU9BLEVBQUtpSSxJQUFRLFNBTFFwSSxRQUFRdkMsT0FBTyxJQUFJUSxVQUFVLDJDQVE1RCxDQUNEN0UsSUFBSyxVQUNMTixNQUFPLFNBQWlCTSxHQUN0QixPQUFPM0IsS0FBS3dRLGtCQUFrQjNCLEVBQXFCQyxVQUFVMUksTUFBSyxTQUFVcUssR0FDMUUsT0FBT0EsRUFBTXhQLElBQUlVLE1BQ2hCeUUsS0FBS3dJLEtBRVQsQ0FDRGpOLElBQUssVUFDTE4sTUFBTyxTQUFpQk0sRUFBS04sR0FDM0IsT0FBT3JCLEtBQUt3USxrQkFBa0IzQixFQUFxQkUsV0FBVzNJLE1BQUssU0FBVXFLLEdBQzNFLE9BQU9BLEVBQU1JLElBQUl4UCxFQUFPTSxNQUN2QnlFLEtBQUt3SSxLQUVULENBQ0RqTixJQUFLLGFBQ0xOLE1BQU8sU0FBb0JNLEdBQ3pCLE9BQU8zQixLQUFLd1Esa0JBQWtCM0IsRUFBcUJFLFdBQVczSSxNQUFLLFNBQVVxSyxHQUMzRSxPQUFPQSxFQUFjLE9BQUU5TyxNQUN0QnlFLEtBQUt3SSxLQUVULENBQ0RqTixJQUFLLFFBQ0xOLE1BQU8sV0FDTCxPQUFPckIsS0FBS29RLEtBQUtoSyxNQUFLLFNBQVV3SixHQUc5QixJQUZBLElBQUlVLEVBQWNWLEVBQUdVLFlBQVlWLEVBQUdLLGlCQUFrQnBCLEVBQXFCRSxXQUN2RStCLEVBQUksR0FDQzFRLEVBQUksRUFBRzJRLEVBQU1uQixFQUFHSyxpQkFBaUJySSxPQUFReEgsRUFBSTJRLEVBQUszUSxJQUFLLENBQzlELElBQUk0USxFQUFhcEIsRUFBR0ssaUJBQWlCN1AsR0FDckMwUSxFQUFFekosS0FBS3VILEVBQVUwQixFQUFZQyxZQUFZUyxHQUFZQyxVQUV2RCxPQUFPMUksUUFBUTJJLElBQUlKLFVBS2xCN0MsRUF2RmlEIiwiZmlsZSI6InJlYWltLXN3Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwicmVhaW0td2ViLXNka1wiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJyZWFpbS13ZWItc2RrXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJlYWltLXdlYi1zZGtcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwiY29uc3QgUFJPRFVDVElPTiA9ICEhKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpO1xuY29uc3QgTE9DQUxfRVZFTlRTX0FQSSA9ICdodHRwOi8vbG9jYWxob3N0OjU1NTUnO1xuY29uc3QgTE9DQUxfU1VCU19BUEkgPSAnaHR0cDovL2xvY2FsaG9zdDo0MzQzJztcbmNvbnN0IFBST0RfRVZFTlRTX0FQSSA9ICdodHRwczovL2V2ZW50cy5yZWFpbS5tZSc7XG5jb25zdCBQUk9EX1NVQlNfQVBJID0gJ2h0dHBzOi8vc3Vicy5yZWFpbS5tZSc7XG5cbndpbmRvdy5FTlYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcblxuZXhwb3J0IGNvbnN0IFJFQUlNX1NXX1BBVEggPSAhUFJPRFVDVElPTiA/XG4gICcvcmVhaW0tc3cuanMnIDpcbiAgKHNlbGYud2luZG93ICYmIHNlbGYud2luZG93LlJFQUlNX1NXX1BBVEhfR0xPQkFMIHx8ICcvc3cuanMnKTtcbmV4cG9ydCBjb25zdCBSRUFJTV9TREtfVklTSVRTID0gJ3JlYWltX3Nka192aXNpdHMnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX0RFTklFRF9PTl9WSVNJVFMgPSAncmVhaW1fc2RrX2RlbmllZF9vbl92aXNpdHMnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1BVU0hfVVNFUl9TVUJTQ1JJQkVEID0gJ3JlYWltX3Nka19wdXNoX3VzZXJfc3Vic2NyaWJlZCc7XG5leHBvcnQgY29uc3QgUkVBSU1fVUlEID0gJ3JlYWltX3Nka191aWQnO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1NBVkVfU1VCU0NSSVBUSU9OID0gJ3JlYWltX3NhdmVfc3Vic2NyaXB0aW9uJztcbmV4cG9ydCBjb25zdCBSRUFJTV9FVkVOVFNfQVBJID0gIVBST0RVQ1RJT04gPyBMT0NBTF9FVkVOVFNfQVBJIDogUFJPRF9FVkVOVFNfQVBJO1xuZXhwb3J0IGNvbnN0IFJFQUlNX1NVQlNfQVBJID0gIVBST0RVQ1RJT04gPyBMT0NBTF9TVUJTX0FQSSA6IFBST0RfU1VCU19BUEk7XG5leHBvcnQgY29uc3QgUkVBSU1fU1RPUkFHRV9OQU1FID0gJ3JlYWltX3Nka19zdG9yYWdlJztcbmV4cG9ydCBjb25zdCBSRUFJTV9JTVBSRVNTSU9OID0gJ2knO1xuZXhwb3J0IGNvbnN0IFJFQUlNX0NMSUNLID0gJ2MnO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUnO1xuLyogZXNsaW50LWVuYWJsZSAqL1xuaW1wb3J0IFNlcnZpY2VXb3JrZXJTdG9yYWdlIGZyb20gJ3NlcnZpY2V3b3JrZXItc3RvcmFnZSc7XG5pbXBvcnQge1xuICBSRUFJTV9TQVZFX1NVQlNDUklQVElPTixcbiAgUkVBSU1fRVZFTlRTX0FQSSxcbiAgUkVBSU1fU1VCU19BUEksXG4gIFJFQUlNX1NUT1JBR0VfTkFNRSxcbiAgUkVBSU1fSU1QUkVTU0lPTixcbiAgUkVBSU1fQ0xJQ0ssXG4gIFJFQUlNX1VJRFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmNvbnN0IHN0b3JhZ2UgPSBuZXcgU2VydmljZVdvcmtlclN0b3JhZ2UoUkVBSU1fU1RPUkFHRV9OQU1FLCAxKTtcblxuY2xhc3MgUmVBaW1TVyB7XG5cbiAgc3RhdGljIGFzeW5jIGxvZyhraW5kLCB0cmFja2luZywgdmFyaWFudCkge1xuICAgIGlmIChraW5kICYmIHRyYWNraW5nICYmIHZhcmlhbnQpIHtcbiAgICAgIHN3aXRjaCAodmFyaWFudCkge1xuICAgICAgICBjYXNlICdjbXAnOlxuICAgICAgICAgIGZldGNoKGAke1JFQUlNX0VWRU5UU19BUEl9L2xvZz9rPSR7a2luZH0mJHthdG9iKHRyYWNraW5nKX1gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJnJzpcbiAgICAgICAgICBmZXRjaChgJHtSRUFJTV9FVkVOVFNfQVBJfS90cmlnZ2VyP2s9JHtraW5kfSYke2F0b2IodHJhY2tpbmcpfWApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmZWVkJzpcbiAgICAgICAgICBmZXRjaChgJHtSRUFJTV9FVkVOVFNfQVBJfS9mZWVkP2s9JHtraW5kfSYke2F0b2IodHJhY2tpbmcpfWApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB1cGRhdGVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGlkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUkVBSU1fVUlEKTtcblxuICAgICAgaWYgKGlkKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KFJFQUlNX1NVQlNfQVBJICsgJy9yZWZyZXNoJywge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZW5kcG9pbnQ6IHN1YnNjcmlwdGlvbi5lbmRwb2ludCxcbiAgICAgICAgICAgIGF1dGg6IHN1YnNjcmlwdGlvbi5rZXlzLmF1dGgsXG4gICAgICAgICAgICBwMjU2ZGg6IHN1YnNjcmlwdGlvbi5rZXlzLnAyNTZkaFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYuZmV0Y2gocmVxKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGhhbmRsZUluc3RhbGwoZXZlbnQpIHtcbiAgICBzZWxmLnNraXBXYWl0aW5nKCk7XG4gIH1cblxuICBzdGF0aWMgaGFuZGxlQWN0aXZhdGUoZXZlbnQpIHtcbiAgICBldmVudC53YWl0VW50aWwoc2VsZi5jbGllbnRzLmNsYWltKCkpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGhhbmRsZVB1c2hFdmVudChldmVudCkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBldmVudC5kYXRhLmpzb24oKTtcblxuICAgIGNvbnN0IHRpdGxlID0gcGF5bG9hZC5jLnQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGJvZHk6IHBheWxvYWQuYy5kLFxuICAgICAgaWNvbjogcGF5bG9hZC5jLmksXG4gICAgICBpbWFnZTogcGF5bG9hZC5jLm0sXG4gICAgICBiYWRnZTogcGF5bG9hZC5jLmIsXG4gICAgICBhY3Rpb25zOiBwYXlsb2FkLmMuYSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdHJhY2tpbmc6IHBheWxvYWQudCxcbiAgICAgICAgdXJsOiBwYXlsb2FkLmMudSxcbiAgICAgICAgYWN0aW9uczogcGF5bG9hZC5jLmEsXG4gICAgICAgIHZhcmlhbnQ6IHBheWxvYWQudlxuICAgICAgfVxuICAgIH07XG5cbiAgICBSZUFpbVNXLmxvZyhSRUFJTV9JTVBSRVNTSU9OLCBwYXlsb2FkLnQsIHBheWxvYWQudik7XG4gICAgZXZlbnQud2FpdFVudGlsKHNlbGYucmVnaXN0cmF0aW9uLnNob3dOb3RpZmljYXRpb24odGl0bGUsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBoYW5kbGVDbGlja0V2ZW50KGV2ZW50KSB7XG4gICAgZXZlbnQubm90aWZpY2F0aW9uLmNsb3NlKCk7XG4gICAgY29uc3QgdHJhY2tpbmcgPSBldmVudC5ub3RpZmljYXRpb24uZGF0YS50cmFja2luZztcbiAgICBjb25zdCB2YXJpYW50ID0gZXZlbnQubm90aWZpY2F0aW9uLmRhdGEudmFyaWFudCB8fCAnY21wJztcblxuICAgIGlmIChldmVudC5hY3Rpb24gPT09ICdhY3Rpb24tMScpIHtcbiAgICAgIGNvbnN0IHVybCA9IGV2ZW50Lm5vdGlmaWNhdGlvbi5kYXRhLmFjdGlvbnNbMF0udXJsO1xuXG4gICAgICBSZUFpbVNXLmxvZyhSRUFJTV9DTElDSywgdHJhY2tpbmcsIHZhcmlhbnQpO1xuICAgICAgZXZlbnQud2FpdFVudGlsKHNlbGYuY2xpZW50cy5vcGVuV2luZG93KHVybCkpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQuYWN0aW9uID09PSAnYWN0aW9uLTInKSB7XG4gICAgICBjb25zdCB1cmwgPSBldmVudC5ub3RpZmljYXRpb24uZGF0YS5hY3Rpb25zWzFdLnVybDtcblxuICAgICAgUmVBaW1TVy5sb2coUkVBSU1fQ0xJQ0ssIHRyYWNraW5nLCB2YXJpYW50KTtcbiAgICAgIGV2ZW50LndhaXRVbnRpbChzZWxmLmNsaWVudHMub3BlbldpbmRvdyh1cmwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGV2ZW50Lm5vdGlmaWNhdGlvbi5kYXRhLnVybCkge1xuICAgICAgICBSZUFpbVNXLmxvZyhSRUFJTV9DTElDSywgdHJhY2tpbmcsIHZhcmlhbnQpO1xuICAgICAgICBldmVudC53YWl0VW50aWwoc2VsZi5jbGllbnRzLm9wZW5XaW5kb3coZXZlbnQubm90aWZpY2F0aW9uLmRhdGEudXJsKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGhhbmRsZVVwZGF0ZVN1YnNjcmlwdGlvbihldmVudCkge1xuICAgIGNvbnN0IG5ld1N1YnNjcmlwdGlvbiA9IGF3YWl0IHNlbGYucmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpO1xuICAgIGNvbnN0IG9sZFN1YnNjcmlwdGlvbiA9IEpTT04ucGFyc2UoYXdhaXQgc3RvcmFnZS5nZXRJdGVtKCdzdWJzY3JpcHRpb24nKSk7XG5cbiAgICBpZiAoIW9sZFN1YnNjcmlwdGlvbikge1xuICAgICAgUmVBaW1TVy5zYXZlTG9jYWxTdWJzY3JpcHRpb24obmV3U3Vic2NyaXB0aW9uKTtcbiAgICAgIFJlQWltU1cudXBkYXRlU3Vic2NyaXB0aW9uKG5ld1N1YnNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N1YnNjcmlwdGlvbiAmJiBvbGRTdWJzY3JpcHRpb24gJiYgKG5ld1N1YnNjcmlwdGlvbi5lbmRwb2ludCAhPT0gb2xkU3Vic2NyaXB0aW9uLmVuZHBvaW50KSkge1xuICAgICAgUmVBaW1TVy5zYXZlTG9jYWxTdWJzY3JpcHRpb24obmV3U3Vic2NyaXB0aW9uKTtcbiAgICAgIFJlQWltU1cudXBkYXRlU3Vic2NyaXB0aW9uKG5ld1N1YnNjcmlwdGlvbik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNhdmVMb2NhbFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgICBhd2FpdCBzdG9yYWdlLnNldEl0ZW0oJ3N1YnNjcmlwdGlvbicsIHN1YnNjcmlwdGlvbik7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgaGFuZGxlTWVzc2FnZShldmVudCkge1xuICAgIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gUkVBSU1fU0FWRV9TVUJTQ1JJUFRJT04pIHtcbiAgICAgIGV2ZW50LndhaXRVbnRpbChSZUFpbVNXLnNhdmVMb2NhbFN1YnNjcmlwdGlvbihldmVudC5kYXRhLnN1YnNjcmlwdGlvbikpO1xuICAgIH1cbiAgfVxufVxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBSZUFpbVNXLmhhbmRsZUluc3RhbGwpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIFJlQWltU1cuaGFuZGxlQWN0aXZhdGUpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdwdXNoJywgUmVBaW1TVy5oYW5kbGVQdXNoRXZlbnQpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdub3RpZmljYXRpb25jbGljaycsIFJlQWltU1cuaGFuZGxlQ2xpY2tFdmVudCk7XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ3B1c2hzdWJzY3JpcHRpb25jaGFuZ2UnLCBSZUFpbVNXLmhhbmRsZVVwZGF0ZVN1YnNjcmlwdGlvbik7XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBSZUFpbVNXLmhhbmRsZU1lc3NhZ2UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX1NlcnZpY2VXb3JrZXJTdG9yYWdlID0gcmVxdWlyZSgnLi9TZXJ2aWNlV29ya2VyU3RvcmFnZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9TZXJ2aWNlV29ya2VyU3RvcmFnZS5TZXJ2aWNlV29ya2VyU3RvcmFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPenRCUVVWQlFTeFBRVUZQUXl4UFFVRlFJaXdpWm1sc1pTSTZJbWx1WkdWNExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnVTJWeWRtbGpaVmR2Y210bGNsTjBiM0poWjJVZ2ZTQm1jbTl0SUNjdUwxTmxjblpwWTJWWGIzSnJaWEpUZEc5eVlXZGxMbXB6Snp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlRaWEoyYVdObFYyOXlhMlZ5VTNSdmNtRm5aVHRjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmV4cG9ydHMucHJvbWlzaWZ5ID0gcHJvbWlzaWZ5O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFNlcnZpY2VXb3JrZXJTdG9yYWdlXG4gKi9cblxudmFyIElEQl9UUkFOU0FDVElPTl9NT0RFID0gZXhwb3J0cy5JREJfVFJBTlNBQ1RJT05fTU9ERSA9IHtcbiAgcmVhZG9ubHk6ICdyZWFkb25seScsXG4gIHJlYWR3cml0ZTogJ3JlYWR3cml0ZScsXG4gIHZlcnNpb25jaGFuZ2U6ICd2ZXJzaW9uY2hhbmdlJ1xufTtcblxuZnVuY3Rpb24gcHJvbWlzaWZ5KGlkYlJlcXVlc3QpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZGJSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUoaWRiUmVxdWVzdC5yZXN1bHQpO1xuICAgIH07XG4gICAgaWRiUmVxdWVzdC5vbmVycm9yID0gcmVqZWN0O1xuICB9KTtcbn1cblxudmFyIFNlcnZpY2VXb3JrZXJTdG9yYWdlID0gZXhwb3J0cy5TZXJ2aWNlV29ya2VyU3RvcmFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VydmljZVdvcmtlclN0b3JhZ2UoZGJfbmFtZSwgdmVyc2lvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VydmljZVdvcmtlclN0b3JhZ2UpO1xuXG4gICAgaWYgKHR5cGVvZiBkYl9uYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignZGJfbmFtZSBtdXN0IGJlIHN0cmluZy4nKTtcbiAgICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdudW1iZXInKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd2ZXJzaW9uIG11c3QgYmUgbnVtYmVyLicpO1xuICAgIHZhciBWRVJTSU9OID0gdmVyc2lvbjtcbiAgICB0aGlzLkRCX05BTUUgPSBkYl9uYW1lO1xuICAgIHRoaXMuU1RPUkVfTkFNRSA9ICdzd19zdG9yYWdlJztcblxuICAgIHZhciBkYiA9IHNlbGYuaW5kZXhlZERCLm9wZW4odGhpcy5EQl9OQU1FLCBWRVJTSU9OKTtcbiAgICBkYi5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfZGIgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgaWYgKF9kYi5vYmplY3RTdG9yZU5hbWVzICYmIF9kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKF90aGlzLlNUT1JFX05BTUUpKSByZXR1cm47XG4gICAgICBfZGIuY3JlYXRlT2JqZWN0U3RvcmUoX3RoaXMuU1RPUkVfTkFNRSk7XG4gICAgfTtcbiAgICB0aGlzLl9fZGIgPSBwcm9taXNpZnkoZGIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlcnZpY2VXb3JrZXJTdG9yYWdlLCBbe1xuICAgIGtleTogJ19hY2Nlc3NBc3luY1N0b3JlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FjY2Vzc0FzeW5jU3RvcmUobW9kZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLl9fZGIudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oX3RoaXMyLlNUT1JFX05BTUUsIG1vZGUpO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoX3RoaXMyLlNUT1JFX05BTUUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FjY2Vzc0FzeW5jU3RvcmUoSURCX1RSQU5TQUNUSU9OX01PREUucmVhZG9ubHkpLnRoZW4oZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnkoc3RvcmUuZ2V0QWxsS2V5cygpKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgICAgcmV0dXJuIGtleXMubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAna2V5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5KGlkeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgXCJrZXlcIiBvbiBcIlN0b3JhZ2VcIicpKTtcbiAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJykgaWR4ID0gMDtcbiAgICAgIHJldHVybiB0aGlzLl9hY2Nlc3NBc3luY1N0b3JlKElEQl9UUkFOU0FDVElPTl9NT0RFLnJlYWRvbmx5KS50aGVuKGZ1bmN0aW9uIChzdG9yZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KHN0b3JlLmdldEFsbEtleXMoKSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgICAgIHJldHVybiBrZXlzW2lkeF0gfHwgbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FjY2Vzc0FzeW5jU3RvcmUoSURCX1RSQU5TQUNUSU9OX01PREUucmVhZG9ubHkpLnRoZW4oZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICAgIHJldHVybiBzdG9yZS5nZXQoa2V5KTtcbiAgICAgIH0pLnRoZW4ocHJvbWlzaWZ5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRJdGVtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWNjZXNzQXN5bmNTdG9yZShJREJfVFJBTlNBQ1RJT05fTU9ERS5yZWFkd3JpdGUpLnRoZW4oZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICAgIHJldHVybiBzdG9yZS5wdXQodmFsdWUsIGtleSk7XG4gICAgICB9KS50aGVuKHByb21pc2lmeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlSXRlbScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWNjZXNzQXN5bmNTdG9yZShJREJfVFJBTlNBQ1RJT05fTU9ERS5yZWFkd3JpdGUpLnRoZW4oZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICAgIHJldHVybiBzdG9yZVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIH0pLnRoZW4ocHJvbWlzaWZ5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYi50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbihkYi5vYmplY3RTdG9yZU5hbWVzLCBJREJfVFJBTlNBQ1RJT05fTU9ERS5yZWFkd3JpdGUpO1xuICAgICAgICB2YXIgcSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGIub2JqZWN0U3RvcmVOYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBzdG9yZV9uYW1lID0gZGIub2JqZWN0U3RvcmVOYW1lc1tpXTtcbiAgICAgICAgICBxLnB1c2gocHJvbWlzaWZ5KHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlX25hbWUpLmNsZWFyKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VydmljZVdvcmtlclN0b3JhZ2U7XG59KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OVRaWEoyYVdObFYyOXlhMlZ5VTNSdmNtRm5aUzVxY3lKZExDSnVZVzFsY3lJNld5SndjbTl0YVhOcFpua2lMQ0pKUkVKZlZGSkJUbE5CUTFSSlQwNWZUVTlFUlNJc0luSmxZV1J2Ym14NUlpd2ljbVZoWkhkeWFYUmxJaXdpZG1WeWMybHZibU5vWVc1blpTSXNJbWxrWWxKbGNYVmxjM1FpTENKUWNtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luSmxhbVZqZENJc0ltOXVjM1ZqWTJWemN5SXNJbkpsYzNWc2RDSXNJbTl1WlhKeWIzSWlMQ0pUWlhKMmFXTmxWMjl5YTJWeVUzUnZjbUZuWlNJc0ltUmlYMjVoYldVaUxDSjJaWEp6YVc5dUlpd2lWSGx3WlVWeWNtOXlJaXdpVmtWU1UwbFBUaUlzSWtSQ1gwNUJUVVVpTENKVFZFOVNSVjlPUVUxRklpd2laR0lpTENKelpXeG1JaXdpYVc1a1pYaGxaRVJDSWl3aWIzQmxiaUlzSW05dWRYQm5jbUZrWlc1bFpXUmxaQ0lzSWw5a1lpSXNJbVYyWlc1MElpd2lkR0Z5WjJWMElpd2liMkpxWldOMFUzUnZjbVZPWVcxbGN5SXNJbU52Ym5SaGFXNXpJaXdpWTNKbFlYUmxUMkpxWldOMFUzUnZjbVVpTENKZlgyUmlJaXdpYlc5a1pTSXNJblJvWlc0aUxDSjBjbUZ1YzJGamRHbHZiaUlzSW05aWFtVmpkRk4wYjNKbElpd2lYMkZqWTJWemMwRnplVzVqVTNSdmNtVWlMQ0p6ZEc5eVpTSXNJbWRsZEVGc2JFdGxlWE1pTENKclpYbHpJaXdpYkdWdVozUm9JaXdpYVdSNElpd2lZWEpuZFcxbGJuUnpJaXdpYTJWNUlpd2laMlYwSWl3aWRtRnNkV1VpTENKd2RYUWlMQ0p4SWl3aWFTSXNJbXhsYmlJc0luTjBiM0psWDI1aGJXVWlMQ0p3ZFhOb0lpd2lZMnhsWVhJaUxDSmhiR3dpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08xRkJWV2RDUVN4VExFZEJRVUZCTEZNN096czdRVUZXYUVJN096czdRVUZKVHl4SlFVRk5ReXh6UkVGQmRVSTdRVUZEYkVORExGbEJRVlVzVlVGRWQwSTdRVUZGYkVORExHRkJRVmNzVjBGR2RVSTdRVUZIYkVORExHbENRVUZsTzBGQlNHMUNMRU5CUVRkQ096dEJRVTFCTEZOQlFWTktMRk5CUVZRc1EwRkJiVUpMTEZWQlFXNUNMRVZCUVN0Q08wRkJRM0JETEZOQlFVOHNTVUZCU1VNc1QwRkJTaXhEUVVGWkxGVkJRVk5ETEU5QlFWUXNSVUZCYTBKRExFMUJRV3hDTEVWQlFUQkNPMEZCUXpORFNDeGxRVUZYU1N4VFFVRllMRWRCUVhWQ0xGbEJRVmM3UVVGRGFFTkdMR05CUVZGR0xGZEJRVmRMTEUxQlFXNUNPMEZCUTBRc1MwRkdSRHRCUVVkQlRDeGxRVUZYVFN4UFFVRllMRWRCUVhGQ1NDeE5RVUZ5UWp0QlFVTkVMRWRCVEUwc1EwRkJVRHRCUVUxRU96dEpRVVZaU1N4dlFpeFhRVUZCUVN4dlFqdEJRVU5ZTEdkRFFVRlpReXhQUVVGYUxFVkJRWEZDUXl4UFFVRnlRaXhGUVVFNFFqdEJRVUZCT3p0QlFVRkJPenRCUVVNMVFpeFJRVUZKTEU5QlFVOUVMRTlCUVZBc1MwRkJiVUlzVVVGQmRrSXNSVUZCYVVNc1RVRkJUU3hKUVVGSlJTeFRRVUZLTEVOQlFXTXNlVUpCUVdRc1EwRkJUanRCUVVOcVF5eFJRVUZKTEU5QlFVOUVMRTlCUVZBc1MwRkJiVUlzVVVGQmRrSXNSVUZCYVVNc1RVRkJUU3hKUVVGSlF5eFRRVUZLTEVOQlFXTXNlVUpCUVdRc1EwRkJUanRCUVVOcVF5eFJRVUZOUXl4VlFVRlZSaXhQUVVGb1FqdEJRVU5CTEZOQlFVdEhMRTlCUVV3c1IwRkJaVW9zVDBGQlpqdEJRVU5CTEZOQlFVdExMRlZCUVV3c1IwRkJhMElzV1VGQmJFSTdPMEZCUlVFc1VVRkJUVU1zUzBGQlMwTXNTMEZCUzBNc1UwRkJUQ3hEUVVGbFF5eEpRVUZtTEVOQlFXOUNMRXRCUVV0TUxFOUJRWHBDTEVWQlFXdERSQ3hQUVVGc1F5eERRVUZZTzBGQlEwRkhMRTlCUVVkSkxHVkJRVWdzUjBGQmNVSXNhVUpCUVZNN1FVRkROVUlzVlVGQlRVTXNUVUZCVFVNc1RVRkJUVU1zVFVGQlRpeERRVUZoYUVJc1RVRkJla0k3UVVGRFFTeFZRVUZKWXl4SlFVRkpSeXhuUWtGQlNpeEpRVUYzUWtnc1NVRkJTVWNzWjBKQlFVb3NRMEZCY1VKRExGRkJRWEpDTEVOQlFUaENMRTFCUVV0V0xGVkJRVzVETEVOQlFUVkNMRVZCUVRSRk8wRkJRelZGVFN4VlFVRkpTeXhwUWtGQlNpeERRVUZ6UWl4TlFVRkxXQ3hWUVVFelFqdEJRVU5FTEV0QlNrUTdRVUZMUVN4VFFVRkxXU3hKUVVGTUxFZEJRVms1UWl4VlFVRlZiVUlzUlVGQlZpeERRVUZhTzBGQlEwUTdPenM3YzBOQlJXbENXU3hKTEVWQlFVMDdRVUZCUVRzN1FVRkRkRUlzWVVGQlR5eExRVUZMUkN4SlFVRk1MRU5CUVZWRkxFbEJRVllzUTBGQlpTeGpRVUZOTzBGQlF6RkNMRmxCUVUxRExHTkJRV05rTEVkQlFVZGpMRmRCUVVnc1EwRkJaU3hQUVVGTFppeFZRVUZ3UWl4RlFVRm5RMkVzU1VGQmFFTXNRMEZCY0VJN1FVRkRRU3hsUVVGUFJTeFpRVUZaUXl4WFFVRmFMRU5CUVhkQ0xFOUJRVXRvUWl4VlFVRTNRaXhEUVVGUU8wRkJRMFFzVDBGSVRTeERRVUZRTzBGQlNVUTdPenMyUWtGRlVUdEJRVU5RTEdGQlFVOHNTMEZCUzJsQ0xHbENRVUZNTEVOQlFYVkNiRU1zY1VKQlFYRkNReXhSUVVFMVF5eEZRVU5LT0VJc1NVRkVTU3hEUVVORE8wRkJRVUVzWlVGQlUyaERMRlZCUVZWdlF5eE5RVUZOUXl4VlFVRk9MRVZCUVZZc1EwRkJWRHRCUVVGQkxFOUJSRVFzUlVGRlNrd3NTVUZHU1N4RFFVVkRPMEZCUVVFc1pVRkJVVTBzUzBGQlMwTXNUVUZCWWp0QlFVRkJMRTlCUmtRc1EwRkJVRHRCUVVkRU96czdkMEpCUlVkRExFY3NSVUZCU3p0QlFVTlFMRlZCUVVrc1EwRkJRME1zVlVGQlZVWXNUVUZCWml4RlFVRjFRaXhQUVVGUGFrTXNVVUZCVVVVc1RVRkJVaXhEUVVGbExFbEJRVWxQTEZOQlFVb3NRMEZCWXl4elEwRkJaQ3hEUVVGbUxFTkJRVkE3UVVGRGRrSXNWVUZCU1N4UFFVRlBlVUlzUjBGQlVDeExRVUZsTEZGQlFXNUNMRVZCUVRaQ1FTeE5RVUZOTEVOQlFVNDdRVUZETjBJc1lVRkJUeXhMUVVGTFRDeHBRa0ZCVEN4RFFVRjFRbXhETEhGQ1FVRnhRa01zVVVGQk5VTXNSVUZEU2poQ0xFbEJSRWtzUTBGRFF6dEJRVUZCTEdWQlFWTm9ReXhWUVVGVmIwTXNUVUZCVFVNc1ZVRkJUaXhGUVVGV0xFTkJRVlE3UVVGQlFTeFBRVVJFTEVWQlJVcE1MRWxCUmtrc1EwRkZRenRCUVVGQkxHVkJRVkZOTEV0QlFVdEZMRWRCUVV3c1MwRkJZU3hKUVVGeVFqdEJRVUZCTEU5QlJrUXNRMEZCVUR0QlFVZEVPenM3TkVKQlJVOUZMRWNzUlVGQlN6dEJRVU5ZTEdGQlFVOHNTMEZCUzFBc2FVSkJRVXdzUTBGQmRVSnNReXh4UWtGQmNVSkRMRkZCUVRWRExFVkJRMG80UWl4SlFVUkpMRU5CUTBNN1FVRkJRU3hsUVVGVFNTeE5RVUZOVHl4SFFVRk9MRU5CUVZWRUxFZEJRVllzUTBGQlZEdEJRVUZCTEU5QlJFUXNSVUZGU2xZc1NVRkdTU3hEUVVWRGFFTXNVMEZHUkN4RFFVRlFPMEZCUjBRN096czBRa0ZEVHpCRExFY3NSVUZCUzBVc1N5eEZRVUZQTzBGQlEyeENMR0ZCUVU4c1MwRkJTMVFzYVVKQlFVd3NRMEZCZFVKc1F5eHhRa0ZCY1VKRkxGTkJRVFZETEVWQlEwbzJRaXhKUVVSSkxFTkJRME03UVVGQlFTeGxRVUZUU1N4TlFVRk5VeXhIUVVGT0xFTkJRVlZFTEV0QlFWWXNSVUZCYVVKR0xFZEJRV3BDTEVOQlFWUTdRVUZCUVN4UFFVUkVMRVZCUlVwV0xFbEJSa2tzUTBGRlEyaERMRk5CUmtRc1EwRkJVRHRCUVVkRU96czdLMEpCUTFVd1F5eEhMRVZCUVVzN1FVRkRaQ3hoUVVGUExFdEJRVXRRTEdsQ1FVRk1MRU5CUVhWQ2JFTXNjVUpCUVhGQ1JTeFRRVUUxUXl4RlFVTktOa0lzU1VGRVNTeERRVU5ETzBGQlFVRXNaVUZCVTBrc1RVRkJUU3hSUVVGT0xFVkJRV2RDVFN4SFFVRm9RaXhEUVVGVU8wRkJRVUVzVDBGRVJDeEZRVVZLVml4SlFVWkpMRU5CUlVOb1F5eFRRVVpFTEVOQlFWQTdRVUZIUkRzN096UkNRVU5QTzBGQlEwNHNZVUZCVHl4TFFVRkxPRUlzU1VGQlRDeERRVU5LUlN4SlFVUkpMRU5CUTBNc1kwRkJUVHRCUVVOV0xGbEJRVTFETEdOQlFXTmtMRWRCUVVkakxGZEJRVWdzUTBGQlpXUXNSMEZCUjFFc1owSkJRV3hDTEVWQlFXOURNVUlzY1VKQlFYRkNSU3hUUVVGNlJDeERRVUZ3UWp0QlFVTkJMRmxCUVUweVF5eEpRVUZKTEVWQlFWWTdRVUZEUVN4aFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQlVpeEZRVUZYUXl4TlFVRk5OMElzUjBGQlIxRXNaMEpCUVVnc1EwRkJiMEpaTEUxQlFURkRMRVZCUVd0RVVTeEpRVUZKUXl4SFFVRjBSQ3hGUVVFeVJFUXNSMEZCTTBRc1JVRkJaMFU3UVVGRE9VUXNZMEZCU1VVc1lVRkJZVGxDTEVkQlFVZFJMR2RDUVVGSUxFTkJRVzlDYjBJc1EwRkJjRUlzUTBGQmFrSTdRVUZEUVVRc1dVRkJSVWtzU1VGQlJpeERRVUZQYkVRc1ZVRkJWV2xETEZsQlFWbERMRmRCUVZvc1EwRkJkMEpsTEZWQlFYaENMRVZCUVc5RFJTeExRVUZ3UXl4RlFVRldMRU5CUVZBN1FVRkRSRHRCUVVORUxHVkJRVTgzUXl4UlFVRlJPRU1zUjBGQlVpeERRVUZaVGl4RFFVRmFMRU5CUVZBN1FVRkRSQ3hQUVZSSkxFTkJRVkE3UVVGVlJDSXNJbVpwYkdVaU9pSlRaWEoyYVdObFYyOXlhMlZ5VTNSdmNtRm5aUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1UyVnlkbWxqWlZkdmNtdGxjbE4wYjNKaFoyVmNiaUFxTDF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU1VSQ1gxUlNRVTVUUVVOVVNVOU9YMDFQUkVVZ1BTQjdYRzRnSUhKbFlXUnZibXg1T2lBbmNtVmhaRzl1YkhrbkxGeHVJQ0J5WldGa2QzSnBkR1U2SUNkeVpXRmtkM0pwZEdVbkxGeHVJQ0IyWlhKemFXOXVZMmhoYm1kbE9pQW5kbVZ5YzJsdmJtTm9ZVzVuWlNkY2JuMDdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ3Y205dGFYTnBabmtvYVdSaVVtVnhkV1Z6ZENrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdhV1JpVW1WeGRXVnpkQzV2Ym5OMVkyTmxjM01nUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxjMjlzZG1Vb2FXUmlVbVZ4ZFdWemRDNXlaWE4xYkhRcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnYVdSaVVtVnhkV1Z6ZEM1dmJtVnljbTl5SUQwZ2NtVnFaV04wTzF4dUlDQjlLVHRjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZObGNuWnBZMlZYYjNKclpYSlRkRzl5WVdkbElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb1pHSmZibUZ0WlN3Z2RtVnljMmx2YmlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHSmZibUZ0WlNBaFBUMGdKM04wY21sdVp5Y3BJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJSaVgyNWhiV1VnYlhWemRDQmlaU0J6ZEhKcGJtY3VKeWs3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIyWlhKemFXOXVJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25kbVZ5YzJsdmJpQnRkWE4wSUdKbElHNTFiV0psY2k0bktUdGNiaUFnSUNCamIyNXpkQ0JXUlZKVFNVOU9JRDBnZG1WeWMybHZianRjYmlBZ0lDQjBhR2x6TGtSQ1gwNUJUVVVnUFNCa1lsOXVZVzFsTzF4dUlDQWdJSFJvYVhNdVUxUlBVa1ZmVGtGTlJTQTlJQ2R6ZDE5emRHOXlZV2RsSnp0Y2JseHVJQ0FnSUdOdmJuTjBJR1JpSUQwZ2MyVnNaaTVwYm1SbGVHVmtSRUl1YjNCbGJpaDBhR2x6TGtSQ1gwNUJUVVVzSUZaRlVsTkpUMDRwTzF4dUlDQWdJR1JpTG05dWRYQm5jbUZrWlc1bFpXUmxaQ0E5SUdWMlpXNTBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJRjlrWWlBOUlHVjJaVzUwTG5SaGNtZGxkQzV5WlhOMWJIUTdYRzRnSUNBZ0lDQnBaaUFvWDJSaUxtOWlhbVZqZEZOMGIzSmxUbUZ0WlhNZ0ppWWdYMlJpTG05aWFtVmpkRk4wYjNKbFRtRnRaWE11WTI5dWRHRnBibk1vZEdocGN5NVRWRTlTUlY5T1FVMUZLU2tnY21WMGRYSnVPMXh1SUNBZ0lDQWdYMlJpTG1OeVpXRjBaVTlpYW1WamRGTjBiM0psS0hSb2FYTXVVMVJQVWtWZlRrRk5SU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQjBhR2x6TGw5ZlpHSWdQU0J3Y205dGFYTnBabmtvWkdJcE8xeHVJQ0I5WEc1Y2JpQWdYMkZqWTJWemMwRnplVzVqVTNSdmNtVW9iVzlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWZaR0l1ZEdobGJpaGtZaUE5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0IwY21GdWMyRmpkR2x2YmlBOUlHUmlMblJ5WVc1ellXTjBhVzl1S0hSb2FYTXVVMVJQVWtWZlRrRk5SU3dnYlc5a1pTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISmhibk5oWTNScGIyNHViMkpxWldOMFUzUnZjbVVvZEdocGN5NVRWRTlTUlY5T1FVMUZLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUd4bGJtZDBhQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllXTmpaWE56UVhONWJtTlRkRzl5WlNoSlJFSmZWRkpCVGxOQlExUkpUMDVmVFU5RVJTNXlaV0ZrYjI1c2VTbGNiaUFnSUNBZ0lDNTBhR1Z1S0hOMGIzSmxJRDArSUhCeWIyMXBjMmxtZVNoemRHOXlaUzVuWlhSQmJHeExaWGx6S0NrcEtWeHVJQ0FnSUNBZ0xuUm9aVzRvYTJWNWN5QTlQaUJyWlhsekxteGxibWQwYUNrN1hHNGdJSDFjYmx4dUlDQnJaWGtvYVdSNEtTQjdYRzRnSUNBZ2FXWWdLQ0ZoY21kMWJXVnVkSE11YkdWdVozUm9LU0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRlI1Y0dWRmNuSnZjaWduUm1GcGJHVmtJSFJ2SUdWNFpXTjFkR1VnWENKclpYbGNJaUJ2YmlCY0lsTjBiM0poWjJWY0lpY3BLVHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2xrZUNBaFBUMGdKMjUxYldKbGNpY3BJR2xrZUNBOUlEQTdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkZqWTJWemMwRnplVzVqVTNSdmNtVW9TVVJDWDFSU1FVNVRRVU5VU1U5T1gwMVBSRVV1Y21WaFpHOXViSGtwWEc0Z0lDQWdJQ0F1ZEdobGJpaHpkRzl5WlNBOVBpQndjbTl0YVhOcFpua29jM1J2Y21VdVoyVjBRV3hzUzJWNWN5Z3BLU2xjYmlBZ0lDQWdJQzUwYUdWdUtHdGxlWE1nUFQ0Z2EyVjVjMXRwWkhoZElIeDhJRzUxYkd3cE8xeHVJQ0I5WEc1Y2JpQWdaMlYwU1hSbGJTaHJaWGtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllXTmpaWE56UVhONWJtTlRkRzl5WlNoSlJFSmZWRkpCVGxOQlExUkpUMDVmVFU5RVJTNXlaV0ZrYjI1c2VTbGNiaUFnSUNBZ0lDNTBhR1Z1S0hOMGIzSmxJRDArSUhOMGIzSmxMbWRsZENoclpYa3BLVnh1SUNBZ0lDQWdMblJvWlc0b2NISnZiV2x6YVdaNUtUdGNiaUFnZlZ4dUlDQnpaWFJKZEdWdEtHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVdOalpYTnpRWE41Ym1OVGRHOXlaU2hKUkVKZlZGSkJUbE5CUTFSSlQwNWZUVTlFUlM1eVpXRmtkM0pwZEdVcFhHNGdJQ0FnSUNBdWRHaGxiaWh6ZEc5eVpTQTlQaUJ6ZEc5eVpTNXdkWFFvZG1Gc2RXVXNJR3RsZVNrcFhHNGdJQ0FnSUNBdWRHaGxiaWh3Y205dGFYTnBabmtwTzF4dUlDQjlYRzRnSUhKbGJXOTJaVWwwWlcwb2EyVjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGalkyVnpjMEZ6ZVc1alUzUnZjbVVvU1VSQ1gxUlNRVTVUUVVOVVNVOU9YMDFQUkVVdWNtVmhaSGR5YVhSbEtWeHVJQ0FnSUNBZ0xuUm9aVzRvYzNSdmNtVWdQVDRnYzNSdmNtVmJKMlJsYkdWMFpTZGRLR3RsZVNrcFhHNGdJQ0FnSUNBdWRHaGxiaWh3Y205dGFYTnBabmtwTzF4dUlDQjlYRzRnSUdOc1pXRnlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZlpHSmNiaUFnSUNBZ0lDNTBhR1Z1S0dSaUlEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkSEpoYm5OaFkzUnBiMjRnUFNCa1lpNTBjbUZ1YzJGamRHbHZiaWhrWWk1dlltcGxZM1JUZEc5eVpVNWhiV1Z6TENCSlJFSmZWRkpCVGxOQlExUkpUMDVmVFU5RVJTNXlaV0ZrZDNKcGRHVXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnhJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3TENCc1pXNGdQU0JrWWk1dlltcGxZM1JUZEc5eVpVNWhiV1Z6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElITjBiM0psWDI1aGJXVWdQU0JrWWk1dlltcGxZM1JUZEc5eVpVNWhiV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJSEV1Y0hWemFDaHdjbTl0YVhOcFpua29kSEpoYm5OaFkzUnBiMjR1YjJKcVpXTjBVM1J2Y21Vb2MzUnZjbVZmYm1GdFpTa3VZMnhsWVhJb0tTa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbUZzYkNoeEtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzVjYmlKZGZRPT0iXSwic291cmNlUm9vdCI6IiJ9